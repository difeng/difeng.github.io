<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>difeng</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-12T05:34:20.454Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>difeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scala函数式编程-经典排序算法实现</title>
    <link href="http://yoursite.com/2017/07/11/scala%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/07/11/scala函数式编程-经典排序算法实现/</id>
    <published>2017-07-11T15:19:47.000Z</published>
    <updated>2017-07-12T05:34:20.454Z</updated>
    
    <content type="html"><![CDATA[<p>记得《Function Thinking》这本书中提到，现在的编程范式有两类，一类是“命令式编程”，另一类是“函数式编程”，现在我们最常使用的许多语言像c、c++、java都是命令式的，但其中c++和java也都有一些函数式的类库，可见函数式特性还是受一些程序员的青睐的。还有一些纯函数式的语言如 clojure、haskell则完全是纯函数式的。像python、scala则是混合型的，包含两种范式，给程序员提供了巨大的灵活性，使解决问题的方式更多，可谓是程序员的一大利器。<br>现在就以scala语言的”pattern matching”来实现一些经典的排序算法，来展示一下函数式编程思维方式上带给我们的惊喜和享受。</p>
<h3 id="1-冒泡排序">1.冒泡排序</h3><h4 id="原理：">原理：</h4><p>通过相邻元素比较交换的方式，将最大的元素依次移动到列表中未排好序部分的尾部，重复操作，直到列表中未排好序的部分为空，从而使整个列表有序</p>
<h4 id="scala实现思路：">scala实现思路：</h4><p>通过相邻元素比较交换的方式，将最大的元素依次移动到列表中未排好序部分的尾部，重复操作，直到列表中未排好序的部分为空，从而使整个列表有序</p>
<ol>
<li>新建一冒泡函数bubble(unSorteds: List[A]): A，实现一趟冒泡功能，即从输入列表中冒泡出一个最大元素A</li>
<li>给bubble函数添加两个参数remains: List[A], accOrdereds: List[A],添加后函数如下：bubble(unSorteds: List[A],remains: List[A], accOrdereds: List[A]): A<br>其中remains用于记录每次冒泡后去掉冒出去的元素后剩余元素列表，<br>accOrdereds用于累积每趟冒泡冒出来的元素，然后将返回值A改为List[A],即返回累积排好序的列表。<br>函数bubble使用“模式匹配”匹配为排序的列表，分两种情况</li>
<li>列表中至少有两种元素的情况</li>
<li>列表中只剩余一个元素<br>这种情况下，当剩余元素列表remains为空时，说明整个排序完成。否则继续递归bubble</li>
</ol>
<h4 id="具体scala代码如下">具体scala代码如下</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">BubbleSort</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">    * @param list 待排序列表</span><br><span class="line">    * @tparam A 列表元素类型</span><br><span class="line">    * @return</span><br><span class="line">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span>[</span><span class="type">A</span> &lt;% <span class="type">Ordered</span>[<span class="type">A</span>]](list: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">      * @param unSorteds 每一趟冒泡时待排序列表</span><br><span class="line">      * @param remains  已遍历且未冒出的元素列表</span><br><span class="line">      * @param accOrdereds 已冒出的元素组成的有序列表(是累积的)</span><br><span class="line">      * @return 每一趟冒泡后排好序的列表</span><br><span class="line">      */</span></span><br><span class="line">    <span class="annotation">@tailrec</span> <span class="function"><span class="keyword">def</span> <span class="title">bubble</span>(</span>unSorteds: <span class="type">List</span>[<span class="type">A</span>], remains: <span class="type">List</span>[<span class="type">A</span>], accOrdereds: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = unSorteds <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> h1 :: h2 :: t =&gt;</span><br><span class="line">        <span class="keyword">if</span> (h1 &gt; h2) bubble(h1 :: t, h2 :: remains, accOrdereds)</span><br><span class="line">        <span class="keyword">else</span> bubble(h2 :: t, h1 :: remains, accOrdereds)</span><br><span class="line">      <span class="keyword">case</span> h1 :: <span class="type">Nil</span> =&gt;</span><br><span class="line">        <span class="keyword">if</span> (remains.isEmpty)</span><br><span class="line">          <span class="keyword">return</span> h1 :: accOrdereds</span><br><span class="line">        <span class="keyword">else</span> bubble(remains, <span class="type">Nil</span>,h1 :: accOrdereds)</span><br><span class="line">    &#125;</span><br><span class="line">    bubble(list, <span class="type">Nil</span>, <span class="type">Nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span>(</span>args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">43</span>,<span class="number">11</span>,<span class="number">8</span>)</span><br><span class="line">    println(bubbleSort(list))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-快速排序">2.快速排序</h3><h4 id="原理：-1">原理：</h4><p>使用分治思想，将数列用选好的基准点划分为两个子序列（也就是将比基准点小的元素放左边，比基准点大的元素放右边），递归对子序列使用此方法进行此操作，递归到最底部时，数列的大小是零或一，也就是已排好序。</p>
<h4 id="使用scala的实现思路:">使用scala的实现思路:</h4><p>利用scala的模式匹配对序列进行匹配，分两种情况：</p>
<ol>
<li>序列为空<br>  为空时返回一个空的List()</li>
<li>序列由head和tail组成，head不为空，这时候以head为基准点将序列划分为left和right两个子序列，然后然后对left和right进行同样操作并将结果quickSort(left)和quickSort(right)与基准元素head连接起来，如此递归操作，直到所有子序列都为空，便已排好序。</li>
</ol>
<h4 id="scala代码实现：">scala代码实现：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">QuickSort</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">App</span> &#123;</span></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">    * 快速排序</span><br><span class="line">    *</span><br><span class="line">    * @param list 待排序列表</span><br><span class="line">    * @tparam A 列表元素类型</span><br><span class="line">    * @return</span><br><span class="line">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quickSort</span>[</span><span class="type">A</span> &lt;% <span class="type">Ordered</span>[<span class="type">A</span>]](list: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = list <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Nil</span> =&gt; <span class="type">List</span>()</span><br><span class="line">      <span class="keyword">case</span> head :: tail =&gt;</span><br><span class="line">        <span class="keyword">val</span> (left, right) = tail.partition(_ &lt; head)</span><br><span class="line">        quickSort(left) ::: head :: quickSort(right)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">8</span>)</span><br><span class="line">  println(quickSort(list))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-_插入排序">3. 插入排序</h3><h4 id="原理：-2">原理：</h4><p> 通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入，直到将所有未排序数据都插入到已排序序列中，排序便完成</p>
<h4 id="scala实现思路:">scala实现思路:</h4><ol>
<li>新建一个insert函数实现将一个元素插入到已排序序列的功能，函数签名如下 def insert(a: A, accOrdereds: List[A]): List[A]，其中accOrdereds为已经排序序列，且是累积的，即每次insert时传入的都是当前最新的已排序序列。此函数实现思路也是使用模式匹配来实现。<br>这种情况下</li>
<li>新建一sort函数，函数签名如下：<br>def sort(unSorteds: List[A], accOrdereds: List[A]): List[A]<br>其中unSorteds是以模式匹配的方式匹配头和尾，将头元素使用insert函数插入到累积的已排序的序列。然后再使用sort进行下一轮插入。如此递归执行，直到为排序序列unSorteds为空，返回累积已经排好序的序列</li>
</ol>
<blockquote>
<p>注意<br>  scala中List的头是List总第一个元素，List的尾tail是除去头元素的List</p>
</blockquote>
<h4 id="scala代码实现:">scala代码实现:</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">InsertionSort</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">App</span> &#123;</span></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">    * @param list 待排列表</span><br><span class="line">    * @tparam A 列表元素类型</span><br><span class="line">    * @return</span><br><span class="line">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span>[</span><span class="type">A</span> &lt;% <span class="type">Ordered</span>[<span class="type">A</span>]](list: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">      * @param unSorteds 待排列表</span><br><span class="line">      * @param accOrdereds 累积有序列表</span><br><span class="line">      * @return 有序列表</span><br><span class="line">      */</span></span><br><span class="line">    <span class="annotation">@tailrec</span> <span class="function"><span class="keyword">def</span> <span class="title">sort</span>(</span>unSorteds: <span class="type">List</span>[<span class="type">A</span>], accOrdereds: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = unSorteds <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> ha :: ta =&gt; sort(ta, insert(ha, accOrdereds))</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Nil</span> =&gt; accOrdereds</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">      * @param a 待插入元素</span><br><span class="line">      * @param accOrdereds 累积有序列表</span><br><span class="line">      * @return</span><br><span class="line">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(</span>a: <span class="type">A</span>, accOrdereds: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = accOrdereds <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> h :: t <span class="keyword">if</span> (a &gt; h) =&gt; h :: insert(a, t)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; a :: accOrdereds</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sort(list, <span class="type">Nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">43</span>,<span class="number">11</span>,<span class="number">8</span>)</span><br><span class="line">  println(insertionSort(list).mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="归并排序">归并排序</h3><h4 id="原理">原理</h4><p>使用分治思想，将序列划分为若干个只有一个元素的子序列，重复进行merge排序操作，将子序列两两合并，直到最后只剩下一个子序列，这个子序列就是已排好的序列</p>
<h4 id="scala实现思路:-1">scala实现思路:</h4><ol>
<li>创建一个merge函数用于合并两个排好序的子序列<br>def merge(as: List[A], bs: List[A]): List[A]<br>实现方式通过内建一个loop函数，实现对两个序列的遍历和排序，loop函数签名如下：<br>def loop(cs: List[A], ds: List[A], accSorteds: List[A]): List[A]<br>cs和ds是两个已排序序列，accSorteds是累积排序序列，cs和ds合并过程中产生的新的有序列序列</li>
<li>新建一个划分序列并将划分序列合并排序的函数：<br>splitIn2AndSort(as: List[A]): List[A]</li>
</ol>
<h4 id="scala代码实现">scala代码实现</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MergeSort</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">App</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span>[</span><span class="type">A</span> &lt;% <span class="type">Ordered</span>[<span class="type">A</span>]](list: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">      * @param p 待排序的包含两个列表的元组</span><br><span class="line">      * @return</span><br><span class="line">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span>(</span>p: (<span class="type">List</span>[<span class="type">A</span>], <span class="type">List</span>[<span class="type">A</span>])): <span class="type">List</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">      p <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> (<span class="type">Nil</span>, <span class="type">Nil</span>) =&gt; <span class="type">Nil</span></span><br><span class="line">        <span class="keyword">case</span> (a :: <span class="type">Nil</span>, <span class="type">Nil</span>) =&gt; a :: <span class="type">Nil</span></span><br><span class="line">        <span class="keyword">case</span> (<span class="type">Nil</span>, a :: <span class="type">Nil</span>) =&gt; a :: <span class="type">Nil</span></span><br><span class="line">        <span class="keyword">case</span> (as, bs) =&gt; merge(splitIn2AndSort(as), splitIn2AndSort(bs))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">      * 将给定列表划分为两个列表，并归并排序返回一个有序列表</span><br><span class="line">      * @param as 待划分列表</span><br><span class="line">      * @return</span><br><span class="line">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitIn2AndSort</span>(</span>as: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = sort(splitIn2(as))</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">      * 合并两个有序列表</span><br><span class="line">      * @param as 有序列表</span><br><span class="line">      * @param bs 有序列表</span><br><span class="line">      * @return 合并后的有序列表</span><br><span class="line">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(</span>as: <span class="type">List</span>[<span class="type">A</span>], bs: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">loop</span>(</span>cs: <span class="type">List</span>[<span class="type">A</span>], ds: <span class="type">List</span>[<span class="type">A</span>], accSorteds: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = (cs, ds) <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> (<span class="type">Nil</span>, <span class="type">Nil</span>) =&gt; accSorteds</span><br><span class="line">        <span class="keyword">case</span> (hc :: tc, hd :: td) =&gt;</span><br><span class="line">          <span class="keyword">if</span> (hc &lt; hd)</span><br><span class="line">            loop(tc, ds, hc :: accSorteds)</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            loop(td, cs, hd :: accSorteds)</span><br><span class="line">        <span class="keyword">case</span> (hc :: tc, <span class="type">Nil</span>) =&gt; loop(tc, <span class="type">Nil</span>, hc :: accSorteds)</span><br><span class="line">        <span class="keyword">case</span> (<span class="type">Nil</span>, hd :: td) =&gt; loop(<span class="type">Nil</span>, td, hd :: accSorteds)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      loop(as, bs, <span class="type">Nil</span>).reverse</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitIn2</span>(</span>as: <span class="type">List</span>[<span class="type">A</span>]): (<span class="type">List</span>[<span class="type">A</span>], <span class="type">List</span>[<span class="type">A</span>]) = &#123;</span><br><span class="line">      <span class="keyword">val</span> mid = as.length / <span class="number">2</span></span><br><span class="line">      (as.slice(<span class="number">0</span>, mid), as.slice(mid, as.length))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    splitIn2AndSort(list)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">8</span>)</span><br><span class="line">  println(mergeSort(list).mkString(<span class="string">","</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="选择排序">选择排序</h3><h4 id="原理-1">原理</h4><p>从原序列中依次移出符合条件(最大或最小)的元素，放入到有序序列中，直到原序列吴待排序元素</p>
<h4 id="scala实现思路：-1">scala实现思路：</h4><ol>
<li>新建一函数：<br>def select(remains: List[A], sorteds: List[A], accSorteds: List[A]): List[A]<br>实现从剩余的未排序序列remains中选出符合条件的元素，将它追加到已排序序列sorteds和累积已排序序列accSorteds中</li>
<li>新建函数：<br>def sort(remains: List[A], accSorteds: List[A]): List[A]<br>用来执行一趟选择排序过程，将排序结果累积在accSorteds中，当remains为空时，排序结束，返回accSorteds</li>
</ol>
<h4 id="scala代码实现：-1">scala代码实现：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SelectionSort</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">App</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span>[</span><span class="type">A</span> &lt;% <span class="type">Ordered</span>[<span class="type">A</span>]](list: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">      * @param unSorteds 未排序列表</span><br><span class="line">      * @param accSorteds 累积最终的有序列表</span><br><span class="line">      * @return</span><br><span class="line">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span>(</span>unSorteds: <span class="type">List</span>[<span class="type">A</span>], accSorteds: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] =</span><br><span class="line">      unSorteds <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> h :: t =&gt; select(unSorteds, <span class="type">Nil</span>, accSorteds)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Nil</span> =&gt; accSorteds</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">      *</span><br><span class="line">      * @param unSorteds  未排序列表</span><br><span class="line">      * @param sorteds    选择出的元素组成的有序列表</span><br><span class="line">      * @param accSorteds 累积最终的有序列表</span><br><span class="line">      * @return</span><br><span class="line">      */</span></span><br><span class="line">    <span class="annotation">@tailrec</span> <span class="function"><span class="keyword">def</span> <span class="title">select</span>(</span>unSorteds: <span class="type">List</span>[<span class="type">A</span>], sorteds: <span class="type">List</span>[<span class="type">A</span>], accSorteds: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] =</span><br><span class="line">      unSorteds <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> h1 :: h2 :: t =&gt;</span><br><span class="line">          <span class="keyword">if</span> (h1 &lt; h2)</span><br><span class="line">            select(h2 :: t, h1 :: sorteds, accSorteds)</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            select(h1 :: t, h2 :: sorteds, accSorteds)</span><br><span class="line">        <span class="keyword">case</span> h :: <span class="type">Nil</span> =&gt; sort(sorteds, h :: accSorteds)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Nil</span> =&gt; sort(sorteds, accSorteds)</span><br><span class="line">      &#125;</span><br><span class="line">    sort(list, <span class="type">Nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">8</span>)</span><br><span class="line">  println(selectionSort(list))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上五种排序算均采用scala函数式方式实现，实现过程多采用递归思维和模式匹配，这也是函数式编程通常使用的方式。个人水平有限，如发现纰漏，请指正！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得《Function Thinking》这本书中提到，现在的编程范式有两类，一类是“命令式编程”，另一类是“函数式编程”，现在我们最常使用的许多语言像c、c++、java都是命令式的，但其中c++和java也都有一些函数式的类库，可见函数式特性还是受一些程序员的青睐的。还
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跳跃列表(Skip list)原理和实现</title>
    <link href="http://yoursite.com/2016/12/22/%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8-Skip-list-%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/12/22/跳跃列表-Skip-list-原理和实现/</id>
    <published>2016-12-22T12:59:12.000Z</published>
    <updated>2016-12-23T07:23:29.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跳跃列表原理和实现">跳跃列表原理和实现</h1><h3 id="1-跳跃列表简介：">1.跳跃列表简介：</h3><p>跳跃列表是一种随机化的数据结构，基于并联的链表，其效率可比拟于二叉查找树。基本上，跳跃列表是对有序的链表增加上附加的前进连接，增加是以随机化的方式进行的，所以在列表中的查找可以快速地跳过部分列表，因此而得名。所有操作都以对数随机化时间进行。<br>以上简介摘自-<a href="https://zh.wikipedia.org/wiki/%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8" target="_blank" rel="external">维基百科-跳跃列表</a></p>
<h3 id="2-跳跃列表的产生思想">2.跳跃列表的产生思想</h3><p>有序链表大家都熟悉，假如有一个如下的有序链表：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/skiplist-1.png" alt=""><br>查找元素23,得从头结点开始依次遍历节点直到找到此节点。这样如果链表很长，而正要查找的元素位于链表比较靠后的位置，则就相当于全部遍历。</p>
<p>怎么能使查找变快呢？可否跳过中间的一些节点呢？<br>基于这样的想法，我们可以大胆假想链表如下结构：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/skiplist-2.png" alt=""><br>假如在构造此链表的时候，我们构造了另一个链表，它指向原链表中的元素，只不过它中间跳过一些节点，但任然是按照原链表顺序将其中元素串起来，这样在查找过程中可以跳过一些节点。既然构造一个可以，那多个呢？但是插入，删除元素呢会有什么问题呢？基于这些疑问，接下来我们看看跳跃列表的详细构造和描述。</p>
<h3 id="3-跳跃表的构造和描述">3.跳跃表的构造和描述</h3><p>跳跃表描述:</p>
<ul>
<li>一个跳跃列表由几层组成</li>
<li>底层包含所有元素</li>
<li>每一层都是一个有序链表</li>
<li>在层 i 中的元素按某个固定的概率 p (通常为0.5或0.25)出现在层 i+1 中(也就是说高层中的元素必然在低层)</li>
<li>第i层的某个元素可以向下访问与它有相同值的下层节点<br>如下所示：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level 4&#65306;1&#10;level 3&#65306;1-----4---6&#10;level 2&#65306;1---3-4---6-----9&#10;level 1&#65306;1-2-3-4-5-6-7-8-9-10</span><br></pre></td></tr></table></figure>
<p>也skiplist的cookbook：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/skiplist-3.png" alt=""><br>下来说一下跳跃表的插入，删除，查询的操作<br>插入操作步骤：</p>
<ul>
<li>1.从顶层链表开始遍历,寻找插入点。<br>具体：<br>插入元素x和当前指向的节点的值y比较：<br>x &lt; y:从当前查找位置，下降一层<br>x &gt; y:继续向前遍历<br>重复上面步骤直到结束。遍历时记录每一层的最后遍历位置，这里用update表示，也就是要插入的位置。</li>
<li><p>2.申请新节点，将新元素放入，随机产生一个层数。如果层数大于当前跳跃表的层数，扩大1步骤中的层记录，将新层的值修改为头节点。</p>
</li>
<li><p>3.将update记录的指向对应层的指针指向新的节点，新节点的各个层的指针指向后一个节点。（和普通链表的插入时调整指针是类似的,只不过这里是多层调整）</p>
</li>
<li>4.修改跳跃列表的层数</li>
</ul>
<p>图解：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/skiplist-4.png" alt=""><br>图为元素21找到插入位置后，然后将前面的红箭头都指向21，21指向23</p>
<p>删除操作：</p>
<ul>
<li>1.从顶层链表开始遍历,寻找删除位置点。<br> 具体：<br> 插入元素x和当前指向的节点的值y比较：<br> x &lt; y:从当前查找位置，下降一层<br> x &gt; y:继续向前遍历<br> 重复上面步骤直到结束。遍历时记录每一层的最后遍历位置，这里用update表示，也就是要删除的元素。</li>
<li>2.取出最底层的最后遍历位置的元素，与要删除的元素对比，如果相等，则此元素是要删除的元素，与插入类似，将update记录的对应层的指针指修改为删除节点上的对应层上的指针值（和普通链表的删除时调整指针是类似的，只不过这里是多层调整），释放</li>
<li>4.修改跳跃列表的层数。</li>
</ul>
<h3 id="4-跳跃表的实现">4.跳跃表的实现</h3><p>节点类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkipNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    K k;</span><br><span class="line">    V v;</span><br><span class="line">    SkipNode&lt;K,V&gt;[] forward; </span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SkipNode</span><span class="params">(K k,V v,<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.k = k;</span><br><span class="line">    	<span class="keyword">this</span>.v = v;</span><br><span class="line">    	forward = (SkipNode&lt;K,V&gt;[])<span class="keyword">new</span> SkipNode[level + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; level;i++) &#123;</span><br><span class="line">        	forward[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"SkipNode [k="</span> + k + <span class="string">", v="</span> + v + <span class="string">", forward="</span> + Arrays.toString(forward) + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>跳跃列表类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkipList</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;? <span class="title">super</span> <span class="title">K</span>&gt;,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">	SkipNode&lt;K,V&gt; head;</span><br><span class="line">	<span class="keyword">int</span> level;</span><br><span class="line">	<span class="keyword">int</span> size;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SkipList</span><span class="params">()</span></span>&#123;</span><br><span class="line">		head = <span class="keyword">new</span> SkipNode&lt;K,V&gt;(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="comment">//刚开始只有一层，也就是第0层</span></span><br><span class="line">		level = <span class="number">0</span>;</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * <span class="doctag">@Description</span>:随机生成层数</span><br><span class="line">	 * <span class="doctag">@return</span>:int</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">randomLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> lev;</span><br><span class="line">		<span class="keyword">for</span>(lev = <span class="number">1</span>;Util.random(<span class="number">2</span>) == <span class="number">0</span>;lev++);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> lev;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(K k,V v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> newLevel = randomLevel();</span><br><span class="line">		<span class="comment">//调整头节点</span></span><br><span class="line">		<span class="keyword">if</span>(newLevel &gt; level)&#123;</span><br><span class="line">			SkipNode&lt;K,V&gt; tmp = head;</span><br><span class="line">			head = <span class="keyword">new</span> SkipNode&lt;K,V&gt;(<span class="keyword">null</span>,<span class="keyword">null</span>,newLevel);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tmp.forward.length;i++)&#123;</span><br><span class="line">				head.forward[i] = tmp.forward[i];</span><br><span class="line">			&#125;</span><br><span class="line">			level = newLevel;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">		SkipNode&lt;K,V&gt;[] update = <span class="keyword">new</span> SkipNode[level + <span class="number">1</span>];</span><br><span class="line">		SkipNode&lt;K,V&gt; x = head;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = level;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">			<span class="keyword">while</span>(x.forward[i] != <span class="keyword">null</span> &amp;&amp; x.forward[i].k.compareTo(k) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				x = x.forward[i];</span><br><span class="line">			&#125;</span><br><span class="line">			update[i] = x;</span><br><span class="line">		&#125;</span><br><span class="line">		x = x.forward[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">if</span>(x != <span class="keyword">null</span> &amp;&amp; x.k != <span class="keyword">null</span> &amp;&amp; x.k.compareTo(k) == <span class="number">0</span>) &#123;</span><br><span class="line">			x.v = v;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			x = <span class="keyword">new</span> SkipNode&lt;K,V&gt;(k,v,newLevel);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; newLevel;i++) &#123;</span><br><span class="line">				x.forward[i] = update[i].forward[i];</span><br><span class="line">				update[i].forward[i] = x;</span><br><span class="line">			&#125;</span><br><span class="line">			size++;  </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> V <span class="title">find</span><span class="params">(K k)</span> </span>&#123;</span><br><span class="line">		SkipNode&lt;K,V&gt; x = head;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = level;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">			<span class="keyword">while</span>(x.forward[i] != <span class="keyword">null</span> &amp;&amp; x.forward[i].k.compareTo(k) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				x = x.forward[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		x = x.forward[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">if</span>(k.compareTo(x.k) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> x.v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(K k)</span> </span>&#123;</span><br><span class="line">		<span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">		SkipNode&lt;K,V&gt;[] update = <span class="keyword">new</span> SkipNode[level + <span class="number">1</span>];</span><br><span class="line">		SkipNode&lt;K,V&gt; x = head;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = level;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">			<span class="keyword">while</span>(x.forward[i] != <span class="keyword">null</span> &amp;&amp; x.forward[i].k.compareTo(k) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				x = x.forward[i];</span><br><span class="line">			&#125;</span><br><span class="line">			update[i] = x;</span><br><span class="line">		&#125;</span><br><span class="line">		x = x.forward[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">if</span>(k.compareTo(x.k) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; level;i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(update[i].forward[i] != x) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				update[i].forward[i] = x.forward[i];</span><br><span class="line">			&#125;</span><br><span class="line">			x = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span>(level &gt; <span class="number">0</span> &amp;&amp; head.forward[level] == <span class="keyword">null</span>) &#123;</span><br><span class="line">				level = level - <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			size--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * <span class="doctag">@Description</span>:按层输出(只输出key)</span><br><span class="line">	 * <span class="doctag">@return</span>:void</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printKeyByLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		SkipNode&lt;K,V&gt;  x = head;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = level - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">			System.out.print(<span class="string">"level-"</span> + i + <span class="string">":"</span>);</span><br><span class="line">			x = head.forward[<span class="number">0</span>];</span><br><span class="line">			String headCurLevelForward = head.forward[i] != <span class="keyword">null</span>?head.forward[i].k.toString() : <span class="string">"NULL"</span>;</span><br><span class="line">			System.out.print(String.format(<span class="string">"%5s"</span>,headCurLevelForward) + <span class="string">" "</span>);</span><br><span class="line">			<span class="keyword">while</span>(x != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span>(x.forward.length &lt;= i) &#123;</span><br><span class="line">					System.out.print(String.format(<span class="string">"%5s"</span>,<span class="string">" "</span>) + <span class="string">" "</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">if</span>(x.forward[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">						System.out.print(String.format(<span class="string">"%5s"</span>,<span class="string">" "</span>) + <span class="string">" "</span>);</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						System.out.print(String.format(<span class="string">"%5s"</span>, x.forward[i].k) + <span class="string">" "</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				x = x.forward[<span class="number">0</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * <span class="doctag">@Description</span>:按节点输出(只输出key)</span><br><span class="line">	 * <span class="doctag">@return</span>:void</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printKeyByNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		SkipNode&lt;K,V&gt; x = head;</span><br><span class="line">		<span class="keyword">while</span>(x != <span class="keyword">null</span>) &#123;</span><br><span class="line">			System.out.print(String.format(<span class="string">"%4s forward-size-%s:"</span>,x.k == <span class="keyword">null</span>?<span class="string">"head"</span>:x.k,x.forward.length) + <span class="string">" "</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; x.forward.length;i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(x.forward[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">					System.out.print(String.format(<span class="string">"%3s"</span>,<span class="string">" "</span>) + <span class="string">" "</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.print(String.format(<span class="string">"%3s"</span>,x.forward[i].k,x.forward[i].v) + <span class="string">" "</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">			x = x.forward[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * <span class="doctag">@Description</span>: 随机数生成</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">		<span class="keyword">static</span> Random  random = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">random</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> Math.abs(random.nextInt()) % n;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SkipList&lt;Integer,Integer&gt; skipList = <span class="keyword">new</span> SkipList&lt;Integer, Integer&gt;();</span><br><span class="line">		skipList.insert(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">		skipList.insert(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">		skipList.insert(<span class="number">17</span>, <span class="number">17</span>);</span><br><span class="line">		skipList.insert(<span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">		skipList.insert(<span class="number">23</span>, <span class="number">23</span>);</span><br><span class="line">		skipList.insert(<span class="number">26</span>, <span class="number">26</span>);</span><br><span class="line">		skipList.insert(<span class="number">21</span>, <span class="number">21</span>);</span><br><span class="line">		System.out.println(<span class="string">"printKeyByLevel:"</span>);</span><br><span class="line">		skipList.printKeyByLevel();</span><br><span class="line">		System.out.println(<span class="string">"printKeyByNode:"</span>);</span><br><span class="line">		skipList.printKeyByNode();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果样例：<br>新建跳跃列表，插入元素(1,1),(5,5),(17,17),(19,19)，(21,21)，(23,23)，(26,26)<br>由于是随机化的，所以每次结果都会不一样，所以这里只作为参照。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">printKeyByLevel:</span><br><span class="line">level-<span class="number">4</span>:   <span class="number">17</span>                                           </span><br><span class="line">level-<span class="number">3</span>:   <span class="number">17</span>                                           </span><br><span class="line">level-<span class="number">2</span>:   <span class="number">17</span>                <span class="number">23</span>                         </span><br><span class="line">level-<span class="number">1</span>:    <span class="number">1</span>    <span class="number">17</span>          <span class="number">23</span>                         </span><br><span class="line">level-<span class="number">0</span>:    <span class="number">1</span>     <span class="number">5</span>    <span class="number">17</span>    <span class="number">19</span>    <span class="number">21</span>    <span class="number">23</span>    <span class="number">26</span>       </span><br><span class="line">printKeyByNode:</span><br><span class="line">head forward-size-<span class="number">6</span>:   <span class="number">1</span>   <span class="number">1</span>  <span class="number">17</span>  <span class="number">17</span>  <span class="number">17</span>     </span><br><span class="line">   <span class="number">1</span> forward-size-<span class="number">3</span>:   <span class="number">5</span>  <span class="number">17</span>     </span><br><span class="line">   <span class="number">5</span> forward-size-<span class="number">2</span>:  <span class="number">17</span>     </span><br><span class="line">  <span class="number">17</span> forward-size-<span class="number">6</span>:  <span class="number">19</span>  <span class="number">23</span>  <span class="number">23</span>             </span><br><span class="line">  <span class="number">19</span> forward-size-<span class="number">2</span>:  <span class="number">21</span>     </span><br><span class="line">  <span class="number">21</span> forward-size-<span class="number">2</span>:  <span class="number">23</span>     </span><br><span class="line">  <span class="number">23</span> forward-size-<span class="number">4</span>:  <span class="number">26</span>             </span><br><span class="line">  <span class="number">26</span> forward-size-<span class="number">2</span>:</span><br></pre></td></tr></table></figure></p>
<p>以上已我看着skiplist的cookbook上的算法实现的，这里做了一点调整，就是在插入元素的时候，先随机生成层数，扩大层调整头节点后，再依次查找，寻找插入位置。也就是将扩大层后对头结点调整的动作提前。<a href="https://github.com/difeng/data-structures-and-algorithms" target="_blank" rel="external">源码连接</a><br>参看资料：</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Skip_list" target="_blank" rel="external">Skip_list</a></li>
<li><a href="https://zh.wikipedia.org/zh-hans/%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8" target="_blank" rel="external">跳跃列表</a></li>
<li><a href="http://blog.csdn.net/yang_yulei/article/details/46275283" target="_blank" rel="external">图文翔解SkipList（跳跃表）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;跳跃列表原理和实现&quot;&gt;跳跃列表原理和实现&lt;/h1&gt;&lt;h3 id=&quot;1-跳跃列表简介：&quot;&gt;1.跳跃列表简介：&lt;/h3&gt;&lt;p&gt;跳跃列表是一种随机化的数据结构，基于并联的链表，其效率可比拟于二叉查找树。基本上，跳跃列表是对有序的链表增加上附加的前进连接，增加是以随机化的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>https配置</title>
    <link href="http://yoursite.com/2016/11/03/https%E9%85%8D%E7%BD%AE-1/"/>
    <id>http://yoursite.com/2016/11/03/https配置-1/</id>
    <published>2016-11-03T15:46:12.000Z</published>
    <updated>2016-12-21T06:14:50.650Z</updated>
    
    <content type="html"><![CDATA[<p>将http升级到https的实践总结整理如下:<br>分以下几部部分：</p>
<ul>
<li>https的概念和原理</li>
<li>openssl自建CA和颁发证书</li>
<li>证书的使用</li>
<li>nginx带openssl静态编译<h2 id="1-_https的概念和原理">1. https的概念和原理</h2>在升级http到https之前，一定要先理解好https的原理和整个通信过程，这样才能更清楚理解每一步的配置含义。推荐以下”阮一峰”老师的四篇文章，介绍得非常明白，对我们理解http的工作原理有很大的帮助。</li>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="external">《HTTPS 协议概述》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="external">《图解 HTTPS 协议》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html" target="_blank" rel="external">《HTTPS 协议的七个误解》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/09/ssl-latency.html" target="_blank" rel="external">《HTTPS 协议的延迟有多大？》</a></li>
</ul>
<h2 id="2-_openssl自建CA和颁发证书">2. openssl自建CA和颁发证书</h2><h3 id="2-1_PKI（英语：Public_Key_Infrastructure，缩写：PKI）">2.1 PKI（英语：Public Key Infrastructure，缩写：PKI）</h3><p>公开密钥基础建设（英语：Public Key Infrastructure，缩写：PKI），又称公开密钥基础架构、公钥基础建设、公钥基础设施或公钥基础架构，是一组由硬件、软件、参与者、管理政策与流程组成的基础架构，其目的在于创造、管理、分配、使用、存储以及撤销数字证书。<br>密码学上，公开密钥基础建设借着数字证书认证机构(CA)将用户的个人身份跟公开密钥链接在一起。对每个证书中心用户的身份必须是唯一的。链接关系通过注册和发布过程创建，取决于担保级别，链接关系可能由CA的各种软件或在人为监督下完成。PKI的确定链接关系的这一角色称为注册管理中心（Registration Authority，RA）。RA确保公开密钥和个人身份链接，可以防抵赖。<br>可信赖的第三者（Trusted third party，TTP）也常被用来指证书中心。PKI有时被错误地拿来代表公开密钥密码学或公开密钥算法。</p>
<h3 id="2-2_CA(Certificate_Authority_缩写)">2.2 CA(Certificate Authority 缩写)</h3><p>数字证书认证机构，也称为电子商务认证中心、电子商务认证授权机构，是负责发放和管理数字证书的权威机构，并作为电子商务交易中受信任的第三方，承担公钥体系中公钥的合法性检验的责任。CA负责管理PKI结构下的所有用户(包括各种应用程序)的证书，把用户的公钥和用户的其他信息捆绑在一起，在网上验证用户的身份。CA机构的数字签名使得攻击者不能伪造和篡改证书。</p>
<h3 id="2-3_使用OpenSSL自建CA">2.3 使用OpenSSL自建CA</h3><p>OpenSSL 是一个开放源码的软件，它由三部分功能组成：加密算法库，证书封装管理功能，实现TLS/SSL的功能。下面就基于OpenSSL来制作证书。</p>
<h4 id="制作CA根证书">制作CA根证书</h4><p>选择一个服务器当做CA（证书授权中心）服务器。<br>这里以CentOS 6.5为例，使用openssl来制作<br>   CentOS 6.5 系统的ssl证书的目录结构如下所示：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/etc/pki/CA/</span><br><span class="line">            newcerts    存放CA签署（颁发）过的数字证书（证书备份目录）</span><br><span class="line">            private     用于存放CA的私钥</span><br><span class="line">            crl         吊销的证书</span><br><span class="line">/etc/pki/tls/</span><br><span class="line">             cert.pem    软链接到certs/ca-bundle.crt</span><br><span class="line">             certs/      该服务器上的证书存放目录，可以放自己的证书和内置证书</span><br><span class="line">                   ca-bundle.crt    内置信任的证书</span><br><span class="line">             private    证书密钥存放目录</span><br><span class="line">             openssl.cnf    openssl的CA主配置文件</span><br></pre></td></tr></table></figure></p>
<p>颁发证书：<br>CA首先要有一个根证书，使用此根证书才能颁发证书给别人。在生成根证书之前应先修改好CA的配置文件、序列号、索引等等。<br>修改配置文件vi /etc/pki/tls/openssl.cnf：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[ CA_default ]</span><br><span class="line"></span><br><span class="line">dir		= /etc/pki/CA		<span class="comment"># Where everything is kept</span></span><br><span class="line">certs		= <span class="variable">$dir</span>/certs		<span class="comment"># Where the issued certs are kept</span></span><br><span class="line">crl_dir		= <span class="variable">$dir</span>/crl		<span class="comment"># Where the issued crl are kept</span></span><br><span class="line">database	= <span class="variable">$dir</span>/index.txt	<span class="comment"># database index file.</span></span><br><span class="line"><span class="comment">#unique_subject	= no			# Set to 'no' to allow creation of</span></span><br><span class="line">					<span class="comment"># several ctificates with same subject.</span></span><br><span class="line">new_certs_dir	= <span class="variable">$dir</span>/newcerts		<span class="comment"># default place for new certs.</span></span><br><span class="line"></span><br><span class="line">certificate	= <span class="variable">$dir</span>/cacert.pem 	<span class="comment"># The CA certificate</span></span><br><span class="line">serial		= <span class="variable">$dir</span>/serial 		<span class="comment"># The current serial number</span></span><br><span class="line">crlnumber	= <span class="variable">$dir</span>/crlnumber	<span class="comment"># the current crl number</span></span><br><span class="line">					<span class="comment"># must be commented out to leave a V1 CRL</span></span><br><span class="line">crl		= <span class="variable">$dir</span>/crl.pem 		<span class="comment"># The current CRL</span></span><br><span class="line">private_key	= <span class="variable">$dir</span>/private/cakey.pem<span class="comment"># The private key</span></span><br><span class="line">RANDFILE	= <span class="variable">$dir</span>/private/.rand	<span class="comment"># private random number file</span></span><br><span class="line">...</span><br><span class="line">default_days	= <span class="number">365</span>			<span class="comment"># how long to certify for</span></span><br><span class="line">default_crl_days= <span class="number">30</span>			<span class="comment"># how long before next CRL</span></span><br><span class="line">default_md	= default		<span class="comment"># use public key default MD</span></span><br><span class="line">preserve	= no			<span class="comment"># keep passed DN ordering</span></span><br><span class="line"><span class="comment"># A few difference way of specifying how similar the request should look</span></span><br><span class="line"><span class="comment"># For type CA, the listed attributes must be the same, and the optional</span></span><br><span class="line"><span class="comment"># and supplied fields are just that :-)</span></span><br><span class="line">policy		= policy_match</span><br><span class="line"><span class="comment"># For the CA policy</span></span><br><span class="line">[ policy_match ]</span><br><span class="line">countryName		= match</span><br><span class="line">stateOrProvinceName	= match</span><br><span class="line">organizationName	= match</span><br><span class="line">organizationalUnitName	= optional</span><br><span class="line">commonName		= supplied</span><br><span class="line">emailAddress		= optional</span><br><span class="line"><span class="comment"># For the 'anything' policy</span></span><br><span class="line"><span class="comment"># At this point in time, you must list all acceptable 'object'</span></span><br><span class="line"><span class="comment"># types.</span></span><br><span class="line">[ policy_anything ]</span><br><span class="line">countryName		= optional</span><br><span class="line">stateOrProvinceName	= optional</span><br><span class="line">localityName		= optional</span><br><span class="line">organizationName	= optional</span><br><span class="line">organizationalUnitName	= optional</span><br><span class="line">commonName		= supplied</span><br><span class="line">emailAddress</span><br><span class="line">...</span><br><span class="line">[ req_distinguished_name ]</span><br><span class="line">countryName                     = Country Name (<span class="number">2</span> letter code)</span><br><span class="line">countryName_default             = CN</span><br><span class="line">countryName_min                 = <span class="number">2</span></span><br><span class="line">countryName_max                 = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">stateOrProvinceName             = State or Province Name (full name)</span><br><span class="line"><span class="comment">#stateOrProvinceName_default    = Default Province</span></span><br><span class="line"></span><br><span class="line">localityName                    = Locality Name (eg, city)</span><br><span class="line">localityName_default    = BJ</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>配置项都有说明，可按需求去配置。<br>修改配置文件后在CA目录下创建两个初始文件：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch index.txt serial</span><br><span class="line"><span class="built_in">echo</span> <span class="number">01</span> &gt; serial</span><br></pre></td></tr></table></figure></p>
<p>生成根密钥<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pki/CA/</span><br><span class="line">openssl genrsa -out private/cakey.pem <span class="number">2048</span></span><br></pre></td></tr></table></figure></p>
<p>使用req命令生成自签根证书：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -key private/cakey.pem -out cacert.pem</span><br></pre></td></tr></table></figure></p>
<p>会提示输入一些内容，因为是私有的，所以可以随便输入（之前修改的openssl.cnf会在这里呈现），最好记住能与后面保持一致。上面的自签证书cacert.pem应该生成在/etc/pki/CA下。<br>以上操作均在CA服务器上操作，生成的根证书主要是用来给下面的web服务来签署证书用的</p>
<h3 id="2-4_颁发证书">2.4 颁发证书</h3><p>先要生成待CA签名的证书文件，步骤如下:<br>为nginx服务器生成ssl密钥<br>在nginx服务器上生成ssl的密钥<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/ssl</span><br><span class="line">openssl genrsa -out nginx.key <span class="number">2048</span></span><br></pre></td></tr></table></figure></p>
<p>为nginx服务器生成待CA签名的证书文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/conf/ssl</span><br><span class="line">openssl req -new -key nginx.key -out nginx.csr</span><br></pre></td></tr></table></figure></p>
<p>用CA来签署证书<br>这个必学在CA服务器上执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -days <span class="number">36500</span> -req -in nginx.csr -CA /etc/pki/CA/cacert.pem -CAkey /etc/pki/CA/private/cakey.pem -CAcreateserial -out nginx.crt</span><br></pre></td></tr></table></figure></p>
<p>生成的nginx.crt就是CA颁发的证书。</p>
<h2 id="3-_证书使用">3. 证书使用</h2><p>这里以nignx和tomcat为例来说明，也就是使用通用部署架构，前面是nginx，后面是tomcat，这样只需要在nginx端配置ssl即可，tomcat基本不需要更改。</p>
<h4 id="3-1_nginx的ssl配置,在server中配置">3.1 nginx的ssl配置,在server中配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">....</span><br><span class="line">        listen <span class="number">8088</span> ssl;</span><br><span class="line">        ssl on;</span><br><span class="line">        <span class="comment">#证书文件</span></span><br><span class="line">        ssl_certificate /usr/<span class="built_in">local</span>/nginx/conf/ssl/nginx.crt;</span><br><span class="line">        <span class="comment">#私钥文件</span></span><br><span class="line">        ssl_certificate_key /usr/<span class="built_in">local</span>/nginx/conf/ssl/nginx.key;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在server的location块中添加<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">              proxy_redirect off; </span><br><span class="line">              proxy_<span class="built_in">set</span>_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">              proxy_<span class="built_in">set</span>_header X-Real-IP <span class="variable">$remote_addr</span>; </span><br><span class="line">              <span class="comment">#请求标题可帮助您识别客户端用于连接您的服务器的协议（HTTP 或 HTTPS）</span></span><br><span class="line">              proxy_<span class="built_in">set</span>_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">              <span class="comment">#请求标头可帮助您识别客户端的 IP 地址</span></span><br><span class="line">              proxy_<span class="built_in">set</span>_header X-Forwarded-For           <span class="variable">$proxy_add_x_forwarded_for</span>; </span><br><span class="line">              <span class="comment">#请求标头可帮助您识别负载均衡器用于连接到客户端的端口</span></span><br><span class="line">              proxy_<span class="built_in">set</span>_header X-Forwarded-Port <span class="variable">$server_port</span>;</span><br><span class="line">              proxy_pass      http://webservice;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>顺便解释一下这几个变量确切含义</p>
<ul>
<li><p>X-Forwarded-For</p>
</li>
<li><p>X-Forwarded-Proto</p>
</li>
<li>X-Forwarded-Port</li>
</ul>
<p>X-Forwarded-For</p>
<p>在您使用 HTTP 或 HTTPS 负载均衡器时，X-Forwarded-For 请求标头可帮助您识别客户端的 IP 地址。因为负载均衡器会拦截客户端和服务器之间的流量，因此您的服务器访问日志中将仅含有负载均衡器的 IP 地址。如需查看客户端的 IP 地址，使用 X-Forwarded-For 请求标题。Elastic Load Balancing 会在 X-Forwarded-For 请求标头中存储客户端的 IP 地址，并将标头传递到您的服务器。</p>
<p>X-Forwarded-For 请求标题将采用以下形式：</p>
<p>X-Forwarded-For: clientIPAddress<br>下面是 IP 地址为 203.0.113.7 的客户端的 X-Forwarded-For 请求标头的示例。</p>
<p>X-Forwarded-For: 203.0.113.7<br>下面是 IPv6 地址为 2001:DB8::21f:5bff:febf:ce22:8a2e 的客户端的 X-Forwarded-For 请求标头的示例。</p>
<p>X-Forwarded-For: 2001:DB8::21f:5bff:febf:ce22:8a2e<br>如果请求流经了多个代理，则 X-Forwarded-For 请求标头中的 clientIPAddress 后面跟有在请求到达负载均衡器之前连续流经的各个代理的 IP 地址。因此，最右侧的 IP 地址是最近代理的 IP 地址，最左侧的 IP 地址是原始客户端的 IP 地址。在这种情况下，X-Forwarded-For 请求标头采用以下形式：</p>
<p>X-Forwarded-For: OriginatingClientIPAddress, proxy1-IPAddress, proxy2-IPAddress<br>X-Forwarded-Proto</p>
<p>X-Forwarded-Proto 请求标题可帮助您识别客户端用于连接您的服务器的协议（HTTP 或 HTTPS）。您的服务器访问日志仅包含在服务器和负载均衡器之间使用的协议；不含任何关于在客户端和负载均衡器之间使用的协议之信息。如需判断在客户端和负载均衡器之间使用的协议，使用 X-Forwarded-Proto 请求标题。Elastic Load Balancing 会在 X-Forwarded-Proto 请求标题中存储客户端和负载均衡器之间使用的协议，并随后将标题传递到您的服务器。</p>
<p>您的应用程序或网站可以使用存储在 X-Forwarded-Proto 请求标题中的协议来表现重新导向至适用 URL 的响应。</p>
<p>X-Forwarded-Proto 请求标题将采用以下形式：</p>
<p>X-Forwarded-Proto: originatingProtocol<br>下例中包含的 X-Forwarded-Proto 请求标题源自作为 HTTPS 请求生成自客户端的请求：</p>
<p>X-Forwarded-Proto: https<br>X-Forwarded-Port</p>
<p>X-Forwarded-Port 请求标头可帮助您识别 HTTP 或 HTTPS 负载均衡器用于连接到客户端的端口。</p>
<p>配置完必须重启nginx</p>
<h4 id="3-2_tomcat配置">3.2 tomcat配置</h4><p>在Host里添加value节点<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=<span class="string">"localhost"</span>  appBase=<span class="string">"webapps"</span></span><br><span class="line">            unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</span><br><span class="line">        &lt;Valve className=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> directory=<span class="string">"logs"</span></span><br><span class="line">               prefix=<span class="string">"localhost_access_log."</span> suffix=<span class="string">".txt"</span></span><br><span class="line">               pattern=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span><br><span class="line"></span><br><span class="line">          &lt;Valve className=<span class="string">"org.apache.catalina.valves.RemoteIpValve"</span></span><br><span class="line">                  //以下四项是要配置的内容</span><br><span class="line">                  remoteIpHeader=<span class="string">"x-forwarded-for"</span></span><br><span class="line">                  remoteIpProxiesHeader=<span class="string">"x-forwarded-by"</span></span><br><span class="line">                  protocolHeader=<span class="string">"x-forwarded-proto"</span></span><br><span class="line">                  portHeader=<span class="string">"X-Forwarded-Port"</span></span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Host&gt;</span><br></pre></td></tr></table></figure></p>
<p>这样配置完后，其实就是client和nginx 之间是https，而nginx和tomcat之间是http。一定要注意tomcat中的配置，这几个配置很重要：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &lt;Valve className=<span class="string">"org.apache.catalina.valves.RemoteIpValve"</span></span><br><span class="line">                  remoteIpHeader=<span class="string">"x-forwarded-for"</span></span><br><span class="line">                  remoteIpProxiesHeader=<span class="string">"x-forwarded-by"</span></span><br><span class="line">                  protocolHeader=<span class="string">"x-forwarded-proto"</span></span><br><span class="line">                  portHeader=<span class="string">"X-Forwarded-Port"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p>
<p>没有必要tomcat和nginx都做ssl<br>验证配置是否生效<br>启动tomcat和nginx<br>可通过浏览器访问来验证，原来的网站<br>这里顺便记录一下，java如何调用https的webservice<br>首先必须制作java的keystore文件（用来存放信任证书的一种文件），使用keytool来制作，目的就是把openssl制作的证书添加到java的信任证书文件中。<br>将证书转为pkcs12 证书<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -clcerts -in nginx.crt -inkey nginx.key -out server.p12</span><br></pre></td></tr></table></figure></p>
<p>这里需要输入一个密码<br>转换为jks的格式<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore server.p12 -destkeystore server.jks -srcstoretype pkcs12 -deststoretype jks</span><br></pre></td></tr></table></figure></p>
<p>然后我们可以验证下jks是否包含了完整的证书链<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore server.jks</span><br></pre></td></tr></table></figure></p>
<p>java客户端在调用webservice的时候，需要在客户端实例生成前添加如下代码,确保实例使用的是https，以前的调用方式不变。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jks文件路径</span></span><br><span class="line">System.setProperty(<span class="string">"javax.net.ssl.keyStore"</span>, <span class="string">"jks_file_path"</span>);</span><br><span class="line"><span class="comment">//生成jks文件时设置的密码</span></span><br><span class="line">System.setProperty(<span class="string">"javax.net.ssl.keyStorePassword"</span>, <span class="string">"your_set_pwd"</span>);</span><br><span class="line"><span class="comment">//jks文件路径</span></span><br><span class="line">System.setProperty(<span class="string">"javax.net.ssl.trustStore"</span>, <span class="string">"jks_file_path"</span>);</span><br><span class="line"><span class="comment">//生成jks文件时设置的密码</span></span><br><span class="line">System.setProperty(<span class="string">"javax.net.ssl.trustStorePassword"</span>, <span class="string">"your_set_pwd"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="4-_编译带openssl的nginx">4. 编译带openssl的nginx</h2><p>由于nginx的ssl模块依赖于openssl的库，所以编译安装时有两种方法：<br>一是系统先安装好要求版本的openssl，二是下载openssl源码，编译nginx时指定带openssl编译。两种方式各有利弊，这里介绍第二种方式。<br>下载ngnix源码包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-<span class="number">1.9</span>.<span class="number">9</span>.tar.gz</span><br><span class="line">```	</span><br><span class="line">下载openssl</span><br><span class="line">```sh	</span><br><span class="line">wget https://www.openssl.org/<span class="built_in">source</span>/openssl-<span class="number">1.0</span>.<span class="number">2</span>h.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>下载pcre，nginx的url rewrite模块需要，也可以不安装nginx 的url rewrite模块，这样就可跳过本步骤，编译时指定不安装url rewrite模块就行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://sourceforge.net/projects/pcre/files/pcre/<span class="number">8.37</span>/pcre-<span class="number">8.37</span>.tar.gz/download</span><br></pre></td></tr></table></figure></p>
<p>编译安装<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-<span class="number">1.9</span>.<span class="number">9</span>.tar.gz</span><br><span class="line">tar -zxvf pcre-<span class="number">8.37</span>.tar.gz</span><br><span class="line">tar -zxvf openssl-<span class="number">1.0</span>.<span class="number">2</span>h.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-<span class="number">1.9</span>.<span class="number">9</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_ssl_module --with-openssl=../openssl-<span class="number">1.0</span>.<span class="number">2</span>h --with-pcre=../pcre-<span class="number">8.37</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">```	</span><br><span class="line">检查版本</span><br><span class="line">```sh</span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -v</span><br><span class="line">nginx version: nginx/<span class="number">1.9</span>.<span class="number">9</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将http升级到https的实践总结整理如下:&lt;br&gt;分以下几部部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https的概念和原理&lt;/li&gt;
&lt;li&gt;openssl自建CA和颁发证书&lt;/li&gt;
&lt;li&gt;证书的使用&lt;/li&gt;
&lt;li&gt;nginx带openssl静态编译&lt;h2 id=&quot;1
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javamail通过socks代理发送邮件（使用danted-server作为socks代理）</title>
    <link href="http://yoursite.com/2016/07/03/javamail%E9%80%9A%E8%BF%87socks%E4%BB%A3%E7%90%86%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%EF%BC%88%E4%BD%BF%E7%94%A8danted-server%E4%BD%9C%E4%B8%BAsocks%E4%BB%A3%E7%90%86%EF%BC%89/"/>
    <id>http://yoursite.com/2016/07/03/javamail通过socks代理发送邮件（使用danted-server作为socks代理）/</id>
    <published>2016-07-02T16:28:00.000Z</published>
    <updated>2016-09-28T12:33:46.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-_下载danted-server的源码包">1. 下载danted-server的源码包</h3><p>从官网下载源码包<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.inet.no/dante/files/dante-1.4.1.tar.gz</span><br></pre></td></tr></table></figure></p>
<h3 id="2-_编译源码">2. 编译源码</h3><p>编译很标准,就是configure,make,install<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf  dante-1.4.1.tar.gz&#10;cd dante-1.4.1&#10;./configue&#10;make&#10;make install</span><br></pre></td></tr></table></figure></p>
<p>编译过程很顺畅，基本不会有什么问题。</p>
<h3 id="3-_配置详解">3. 配置详解</h3><p>配置文件中的一段说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The config file is divided into three parts;&#10;#    1) server settings&#10;#    2) rules&#10;#    3) routes&#10;#&#10;# The recommended order is:&#10;#   Server settings:&#10;#               logoutput&#10;#               internal&#10;#               external&#10;#               socksmethod&#10;#               clientmethod&#10;#               users&#10;#               compatibility&#10;#               extension&#10;#               timeout&#10;#               srchost&#10;#&#10;#  Rules:&#10;#        client block/pass&#10;#                from to&#10;#                libwrap&#10;#                log&#10;#&#10;#     block/pass&#10;#                from to&#10;#                socksmethod&#10;#                command&#10;#                libwrap&#10;#                log&#10;#                protocol&#10;#                proxyprotocol&#10;#</span><br></pre></td></tr></table></figure></p>
<p>配置分为三块：<br>a). 通用设置，server setting:<br>由如下几项：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#26085;&#24535;&#37197;&#32622;&#10;/var/log/sockd.log&#10;#&#25509;&#25910;&#36830;&#25509;&#30340;&#22320;&#22336;&#21644;&#31471;&#21475;&#10;internal: 192.168.1.32 port = 1080&#10;#&#20174;&#26381;&#21153;&#22120;&#30340;&#25152;&#26377;&#20256;&#20986;&#30340;&#36830;&#25509;&#23558;&#20351;&#29992;&#30340;IP&#22320;&#22336;&#10;external: 192.168.1.32</span><br></pre></td></tr></table></figure></p>
<p>b). rules,规则配置 :<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#35748;&#35777;methods&#37197;&#32622;&#65292;&#20004;&#31181;&#35748;&#35777;&#35268;&#21017;&#10;clientmethod &#21015;&#20986;client pass/client block rules&#20013;&#20351;&#29992;&#21040;&#30340;method,&#24212;&#29992;&#22312;socks&#21327;&#35758;&#21327;&#21830;&#20043;&#21069;&#25110;&#20854;&#20013;&#10;&#10;socksmethod &#21015;&#20986;&#35748;&#35777;&#30340;&#30340;methods&#65292;&#36825;&#20123;method&#23558;&#22312;client pass/client block rules&#20013;&#20351;&#29992;&#65292;&#19988;&#22312;SOCKS&#21327;&#35758;&#21327;&#21830;&#23436;&#21518;&#20351;&#29992;&#10;&#10;socksmethod &#20855;&#20307;&#21442;&#25968;&#24847;&#24605;&#10;&#10;none  &#19981;&#38656;&#35201;&#35748;&#35777;&#10;username  &#29992;&#25143;&#21517;&#23494;&#30721;&#10;rfc931  &#38656;&#35201;&#29992;&#25143;&#20027;&#26426;&#25552;&#20379;&#19968;&#20010;rfc931 reply&#65292;&#36825;&#20010;reply&#24517;&#39035;&#21305;&#37197;&#19968;&#20010;/etc/passwd&#20013;&#30340;&#29992;&#25143;&#21517;&#10;pam &#36890;&#36807;PAM&#26041;&#24335;&#35748;&#35777;&#10;&#10;clientmethod: none&#10;&#10;#&#29992;&#25143;&#36523;&#20221;&#35748;&#35777;&#10;# &#38656;&#35201;&#28041;&#21450;&#29305;&#27530;&#26435;&#38480;&#30340;&#25805;&#20316;&#65292;&#21487;&#25351;&#23450;&#29305;&#26435;&#29992;&#25143;&#10;# userid &#34;sockd&#34;.&#10;user.privileged: sockd&#10;&#10;# &#19968;&#33324;&#24773;&#20917;&#19979;&#23558;&#20351;&#29992;unprivileged&#29992;&#25143;&#10;user.unprivileged: sockd&#10;&#10;# &#22914;&#26524;&#26410;&#20351;&#29992; libwrap,&#20197;&#19979;&#21487;&#20197;&#19981;&#37197;&#32622;&#10;#&#35774;&#32622;&#29992;&#20160;&#20040;&#29992;&#25143;&#25191;&#34892;libwrap&#21629;&#20196;&#10;#user.libwrap: libwrap&#10;&#10;&#10;# &#20801;&#35768;&#20351;&#29992;&#30340;&#23458;&#25143;&#31471;&#37197;&#32622;&#65292;&#21253;&#25324;&#31471;&#21475;&#30340;&#33539;&#22260;&#10;client pass &#123;&#10;        from: 192.168.0.0/0 port 1-65535 to: 0.0.0.0/0&#10;        clientmethod: rfc931 # &#21305;&#37197;&#25152;&#26377;&#35748;&#35777;&#30340;&#29992;&#25143;&#26159;&#21542;&#37117;&#35748;&#35777;&#10;&#125;&#10;#&#33509;&#37197;&#32622;&#22810;&#20010;client pass&#35268;&#21017;&#65292;&#26159;&#25353;&#39034;&#24207;&#25191;&#34892;&#35268;&#21017;&#30340;&#65292;&#24403;&#21069;&#19968;&#20010;&#22833;&#36133;&#65292;&#21017;&#25191;&#34892;&#21518;&#19968;&#20010;&#65292;&#30452;&#21040;&#25104;&#21151;&#12290;&#10;&#10;#&#38459;&#27490;&#19981;&#26159;&#26412;&#32593;&#32476;&#30340;&#25152;&#26377;client&#30340;&#36830;&#25509;&#65292;&#20063;&#21487;&#20197;&#35774;&#32622;&#20855;&#20307;&#20123;&#65292;&#38480;&#21046;&#26412;&#32593;&#32476;&#20013;&#26576;&#20123;&#22320;&#22336;&#27573;&#30340;&#35775;&#38382;&#10;client block &#123;&#10;        from: 0.0.0.0/0 to: 0.0.0.0/0&#10;        log: connect error&#10;&#125;&#10;&#10;&#10;# &#20801;&#35768;&#36830;&#25509;&#30340;&#22320;&#22336;&#65292;192.168.1.0/24 &#36825;&#20123;&#22320;&#22336;&#26159;&#20801;&#35768;&#35775;&#38382;&#30340;&#10;# &#20801;&#35768;&#25152;&#26377;&#30340;tcp&#21644;udp&#21327;&#35758;&#30340;socks&#10;socks pass &#123;&#10;        from: 192.168.1.0/24 to: 0.0.0.0/0&#10;        protocol: tcp udp&#10;&#125;&#10;&#10;#&#38459;&#27490;&#26576;&#20123;ip&#22320;&#22336;&#30340;&#35775;&#38382;&#65292;&#36825;&#37324;&#22635;&#30340;&#26159;&#38459;&#27490;&#25152;&#26377;&#26412;&#32593;&#32476;&#20043;&#22806;&#30340;ip&#30340;&#35775;&#38382;&#10;socks block &#123;&#10;        from: 0.0.0.0/0 to: 0.0.0.0/0&#10;        log: connect error&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>c). routes设置,可以将接收到的固定协议的连接转到固定的代理服务上去，如下边的两个示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##route to UPnP server&#10;# route &#123;&#10;#         from: 0.0.0.0/0 to: .example.org&#10;#             via: http://192.0.2.2:1900/InternetGatewayDevice.xml&#10;#         proxyprotocol: upnp&#10;#         method: none&#10;# &#125;&#10;&#10;##route to HTTP proxy&#10;#route &#123;                                                             &#10;#        from: 0.0.0.0/0 to: 0.0.0.0/0 via: 10.1.1.1 port = 3128    &#10;#        command: connect # only thing a httproxy supports.     &#10;#        protocol: tcp&#10;#        proxyprotocol: http_v1.0                                    &#10;#&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4-_javamail通过socks代理来发邮件。">4. javamail通过socks代理来发邮件。</h3><p>示例：<br>socks代理(danted-server服务器)：192.168.1.118 port：1080<br>javamail发送端：192.168.1.32<br>代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> <span class="keyword">throws</span> AddressException, MessagingException </span>&#123;</span><br><span class="line">       Properties props = System.getProperties();</span><br><span class="line">       <span class="comment">//socksProxyHost,socksProxyPort是sock代理的全局配置</span></span><br><span class="line">       <span class="comment">//props.setProperty("socksProxyHost","192.168.1.118");</span></span><br><span class="line">       <span class="comment">//props.setProperty("socksProxyPort","1080");</span></span><br><span class="line">       <span class="comment">//mail.smtp.socks.host，mail.smtp.socks.port只针对smtp协议的sock连接</span></span><br><span class="line">	   props.setProperty(<span class="string">"mail.smtp.socks.host"</span>, <span class="string">"192.168.1.118"</span>);</span><br><span class="line">       props.setProperty(<span class="string">"mail.smtp.socks.port"</span>, <span class="string">"1080"</span>);</span><br><span class="line">       props.setProperty(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.163.com"</span>);</span><br><span class="line">       props.setProperty(<span class="string">"mail.smtp.port"</span>, <span class="string">"465"</span>); </span><br><span class="line">       props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">       props.setProperty(<span class="string">"mail.debug"</span>, <span class="string">"true"</span>);</span><br><span class="line">	   props.put(<span class="string">"mail.smtp.ssl.enable"</span>, <span class="string">"true"</span>);</span><br><span class="line">       <span class="keyword">final</span> String username = <span class="string">"sender@163.com"</span>;</span><br><span class="line">       <span class="keyword">final</span> String password = <span class="string">"password"</span>;</span><br><span class="line">       Session session = Session.getDefaultInstance(props,</span><br><span class="line">                            <span class="keyword">new</span> Authenticator()&#123;</span><br><span class="line">                               <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                  <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(username, password);</span><br><span class="line">                               &#125;&#125;);</span><br><span class="line">       Message msg = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">       msg.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"sender@domain"</span>));</span><br><span class="line">       msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(<span class="string">"recipient@domain"</span>,<span class="keyword">false</span>));</span><br><span class="line">       msg.setSubject(<span class="string">"Hello"</span>);</span><br><span class="line">       msg.setText(<span class="string">"How are you"</span>);</span><br><span class="line">       msg.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">       Transport.send(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">try</span> &#123;</span><br><span class="line">			sendMail();</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>注意上面代码中的如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> //1.socksProxyHost,socksProxyPort&#26159;sock&#20195;&#29702;&#30340;&#20840;&#23616;&#37197;&#32622;&#10; //props.setProperty(&#34;socksProxyHost&#34;,&#34;192.168.1.118&#34;);&#10; //props.setProperty(&#34;socksProxyPort&#34;,&#34;1080&#34;);&#10; //2.mail.smtp.socks.host&#65292;mail.smtp.socks.port&#21482;&#38024;&#23545;smtp&#21327;&#35758;&#30340;sock&#36830;&#25509;&#10;props.setProperty(&#34;mail.smtp.socks.host&#34;, &#34;192.168.1.118&#34;);&#10; props.setProperty(&#34;mail.smtp.socks.port&#34;, &#34;1080&#34;);</span><br></pre></td></tr></table></figure></p>
<p>socksProxyHost、socksProxyPort这两个属性对此jvm进程中的所有sock连接都有效,mail.smtp.socks.host、mail.smtp.socks.port两个属性只对stmp协议的sock有效，所以如果只是发邮件需要代理而其他不需要代理，则可以按配置2来设置</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-_下载danted-server的源码包&quot;&gt;1. 下载danted-server的源码包&lt;/h3&gt;&lt;p&gt;从官网下载源码包&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring boot下Servlet容器Tomcat和Undertow性能对比</title>
    <link href="http://yoursite.com/2016/06/16/spring-boot%E4%B8%8BServlet%E5%AE%B9%E5%99%A8Tomcat%E5%92%8CUndertow%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/"/>
    <id>http://yoursite.com/2016/06/16/spring-boot下Servlet容器Tomcat和Undertow性能对比/</id>
    <published>2016-06-16T07:57:00.000Z</published>
    <updated>2016-08-06T15:52:33.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试目的：">测试目的：</h2><p>Tomcat和Undertow的性能做对比，确定生产环境调优参数</p>
<h2 id="测试工具">测试工具</h2><p>压测工具：jmeter<br>jvm监控工具：visualvm</p>
<h2 id="测试过程：">测试过程：</h2><ol>
<li>设置jmeter的线程组参数，设置如下:100个线程,每个线程发起100个请求,线程启动间隔是1秒<br><img src="http://7xawio.com1.z0.glb.clouddn.com/spring-boot-performace-jmeter_config.png" alt="jmeter线程组参数设置"></li>
<li>设置请求参数,这里设置的是http，post请求。<br><img src="http://7xawio.com1.z0.glb.clouddn.com/spring-boot-performace-jmeter_request_config.png" alt="jmeter的http request参数设置"></li>
<li>测试tomcat下的性能表现<br>viusalVm监控结果：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/spring-boot-performace-tomcat-monitor.png" alt="tomcat下的性能监控图"><br>jmeter聚合报告：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/spring-boot-performace-jmeter_tomcat_report.png" alt="jmeter聚合报告-tomcat"></li>
<li>测试Undertow下的性能表现<br><img src="http://7xawio.com1.z0.glb.clouddn.com/spring-boot-performace-_undertow_monitor.png" alt="undertow下的性能监控图"><br>jmeter聚合报告：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/spring-boot-performace-_undertow_report.png" alt="jmeter聚合报告-undertow"></li>
</ol>
<h2 id="测试结果">测试结果</h2><p>  当服务启动后有监控图对比</p>
<table>
<thead>
<tr>
<th>servlet容器</th>
<th>使用内存(最大)</th>
<th>线程数</th>
</tr>
</thead>
<tbody>
<tr>
<td>tomcat</td>
<td>65M</td>
<td>122</td>
</tr>
<tr>
<td>undertow</td>
<td>47M</td>
<td>15</td>
</tr>
</tbody>
</table>
<p>  jmeter压测过程中监控结果对比</p>
<table>
<thead>
<tr>
<th>servlet容器</th>
<th>使用内存(最大)</th>
<th>线程数</th>
</tr>
</thead>
<tbody>
<tr>
<td>tomcat</td>
<td>148M</td>
<td>19</td>
</tr>
<tr>
<td>undertow</td>
<td>127M</td>
<td>47</td>
</tr>
</tbody>
</table>
<p>  jmeter报告的对比</p>
<table>
<thead>
<tr>
<th>使用servlet容器</th>
<th>samples</th>
<th>Average</th>
<th>Media</th>
<th>90%Line</th>
<th>95%Line</th>
<th>99%Line</th>
<th>Min</th>
<th>Max</th>
<th>Error%</th>
<th>Throughput</th>
<th>KB/Sec</th>
</tr>
</thead>
<tbody>
<tr>
<td>tomcat</td>
<td>10000</td>
<td>166</td>
<td>122</td>
<td>247</td>
<td>359</td>
<td>1390</td>
<td>2</td>
<td>3982</td>
<td>0.00%</td>
<td>467.3/sec</td>
<td>115.1</td>
</tr>
<tr>
<td>undertow</td>
<td>10000</td>
<td>151</td>
<td>113</td>
<td>270</td>
<td>375</td>
<td>788</td>
<td>3</td>
<td>2324</td>
<td>0.00%</td>
<td>545.4/sec</td>
<td>132.6</td>
</tr>
</tbody>
</table>
<p><strong>结论</strong>：<br>在相同资源使用量的情况下undertow有较好的吞吐量和较低的访问时延，所以生产环境<br>以上只是粗略的测试，也不够专业，敬请谅解，但大致能对比出结果。如果大家有更好的测试方法，欢迎交流，可邮件联系。</p>
<p>参考资料：<br>Spring Boot 性能优化:<br><a href="http://blog.oneapm.com/apm-tech/385.html" target="_blank" rel="external">OneApm王鹏的分享</a><br><a href="http://www.alexecollins.com/spring-boot-performance/" target="_blank" rel="external">Spring Boot Performance</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试目的：&quot;&gt;测试目的：&lt;/h2&gt;&lt;p&gt;Tomcat和Undertow的性能做对比，确定生产环境调优参数&lt;/p&gt;
&lt;h2 id=&quot;测试工具&quot;&gt;测试工具&lt;/h2&gt;&lt;p&gt;压测工具：jmeter&lt;br&gt;jvm监控工具：visualvm&lt;/p&gt;
&lt;h2 id=&quot;测试过程：
    
    </summary>
    
    
      <category term="spring-boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>spring集成mina</title>
    <link href="http://yoursite.com/2016/06/10/pring-boot%E9%9B%86%E6%88%90mina/"/>
    <id>http://yoursite.com/2016/06/10/pring-boot集成mina/</id>
    <published>2016-06-10T14:35:00.000Z</published>
    <updated>2016-06-23T06:15:01.321Z</updated>
    
    <content type="html"><![CDATA[<p>spring 和mina集成总结，spring 的配置就不做过多的介绍了，主要将mina如何配置到spring中做个介绍</p>
<ol>
<li><p>配置思路：<br> 其实配置过程就是将我们启动mina服务的初始化过程全都配置到spring的配置文件中，交给spring来管理。</p>
</li>
<li><p>配置样例<br>比如以下mina的server初始化代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建socket套接字</span></span><br><span class="line">SocketAcceptor acceptor = <span class="keyword">new</span> NioSocketAcceptor();</span><br><span class="line"><span class="comment">//创建IO过滤器链</span></span><br><span class="line">DefaultIoFilterChainBuilder chain = <span class="keyword">new</span> DefaultIoFilterChainBuilder();</span><br><span class="line"><span class="comment">//序列化编解码工厂对象</span></span><br><span class="line">ObjectSerializationCodecFactory codec = <span class="keyword">new</span> ObjectSerializationCodecFactory();</span><br><span class="line"><span class="comment">//心跳工厂类</span></span><br><span class="line">KeepAliveMessageFactoryImpl kamfi = <span class="keyword">new</span> KeepAliveMessageFactoryImpl();</span><br><span class="line"><span class="comment">//心跳过滤器</span></span><br><span class="line">KeepAliveFilter kaf = <span class="keyword">new</span> KeepAliveFilter(kamfi);</span><br><span class="line">kaf.setForwardEvent(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//设置接收心跳的频率</span></span><br><span class="line">kaf.setRequestInterval(<span class="number">30</span>);</span><br><span class="line"><span class="comment">//添加编解码过滤器</span></span><br><span class="line">chain.addLast(<span class="string">"chain"</span>, <span class="keyword">new</span> ProtocolCodecFilter(codec));</span><br><span class="line"><span class="comment">//添加心跳过滤器</span></span><br><span class="line">chain.addLast(<span class="string">"heart"</span>, kaf);</span><br><span class="line"><span class="comment">//设置服务处理类</span></span><br><span class="line">acceptor.setHandler(<span class="keyword">new</span> ServerHandler());</span><br><span class="line">acceptor.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">30001</span>));</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果要配置到spring中的话，具体配置如以下几项：<br>装载编解码过滤器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编解码过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"codecFilter"</span> <span class="attribute">class</span>=<span class="value">"org.apache.mina.filter.codec.ProtocolCodecFilter"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">constructor-arg</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">bean</span></span><br><span class="line">				<span class="attribute">class</span>=<span class="value">"org.apache.mina.filter.codec.serialization.ObjectSerializationCodecFactory"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>装载心跳过滤器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"keepAliveFilter"</span> <span class="attribute">class</span>=<span class="value">"org.apache.mina.filter.keepalive.KeepAliveFilter"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">constructor-arg</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">bean</span></span><br><span class="line">				<span class="attribute">class</span>=<span class="value">"com.difeng.spring.mina.server.KeepAliveMessageFactoryImpl"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">constructor-arg</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"forwardEvent"</span> <span class="attribute">value</span>=<span class="value">"true"</span> /&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"requestInterval"</span> <span class="attribute">value</span>=<span class="value">"30"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置过滤器链,将上面两个过滤器配置到其中,<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"filterChainBuilder"</span></span><br><span class="line">		<span class="attribute">class</span>=<span class="value">"org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"filters"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">map</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">entry</span> <span class="attribute">key</span>=<span class="value">"codecFilter"</span> <span class="attribute">value-ref</span>=<span class="value">"codecFilter"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">entry</span> <span class="attribute">key</span>=<span class="value">"heart"</span> <span class="attribute">value-ref</span>=<span class="value">"keepAliveFilter"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="title">map</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置地址转换策略，这个是必须配置的要不然服务将不能启动<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.CustomEditorConfigurer"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"customEditors"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">map</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">entry</span> <span class="attribute">key</span>=<span class="value">"java.net.SocketAddress"</span></span><br><span class="line">					<span class="attribute">value</span>=<span class="value">"org.apache.mina.integration.beans.InetSocketAddressEditor"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="title">map</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置套接字<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"tcpAcceptor"</span> <span class="attribute">class</span>=<span class="value">"org.apache.mina.transport.socket.nio.NioSocketAcceptor"</span></span><br><span class="line">		<span class="attribute">init-method</span>=<span class="value">"bind"</span> <span class="attribute">destroy-method</span>=<span class="value">"unbind"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"defaultLocalAddress"</span> <span class="attribute">value</span>=<span class="value">":30001"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"handler"</span> <span class="attribute">ref</span>=<span class="value">"serverHandler"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"reuseAddress"</span> <span class="attribute">value</span>=<span class="value">"true"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"filterChainBuilder"</span> <span class="attribute">ref</span>=<span class="value">"filterChainBuilder"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>以上只是一个配置示例，如果要做更复杂的配置，如添加线程池自定义定义IOFilter的执行器等，还有多个server等，都可以一步一步去配置，目的就是要让spring去转载mina的组件。</p>
<p>注意mina和spring结合时，必须添加这几个依赖构件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.mina<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mina-integration-beans<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.mina<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mina-integration-jmx<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>以上只是介绍了配置思路，具体可以参考github上我给出的样例工程，这个工程用的是spring boot，因为spring boot便于配置也方便启动，很容易上手。<br>demo地址:<a href="https://github.com/difeng/demos/tree/master/spring-integrated-mina" target="_blank" rel="external">https://github.com/difeng/demos/tree/master/spring-integrated-mina</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;spring 和mina集成总结，spring 的配置就不做过多的介绍了，主要将mina如何配置到spring中做个介绍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;配置思路：&lt;br&gt; 其实配置过程就是将我们启动mina服务的初始化过程全都配置到spring的配置文件中，交给sprin
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>构建之法-读后感</title>
    <link href="http://yoursite.com/2016/03/21/thinking-in-goujianzhifa/"/>
    <id>http://yoursite.com/2016/03/21/thinking-in-goujianzhifa/</id>
    <published>2016-03-21T05:21:00.000Z</published>
    <updated>2016-03-25T08:08:12.720Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;阅读构建之法的过程很有趣，我也很享受，特别感谢作者，更要感谢好友的推荐！有时候喜欢读一些有趣且不缺乏专业性的书，可惜市面上这种书少之又少，有些讲得太专业，故弄玄虚，往往太偏于理论，而实际中很少能有用！有些又过于简单，东拼西凑，没有那种连贯完整的思想性。我这里说的书包括现有的许多工程书籍。邹老师能以清新且闲适的文笔将复杂而庞大的软件工程讲得明白而不失学术价值，真是我们这一代程序员的莫大的福分。<br>&ensp;&ensp;&ensp;&ensp;我在阅读的过程中，不断发现书中讲得大多都是现实开发和协作中经常遇到的问题，读起来很亲切，很容易理解。<br>&ensp;&ensp;&ensp;&ensp;阅读这本书，我有如下几点感受。<br>&ensp;&ensp;&ensp;&ensp;1.这本书，让我对软件工程有了全新的认识。让我不再执着于教条的软件工程开理念，执着于敏捷开发，就像《人月神话》里说的“没有银弹”，实践是检验真理的唯一标准，适合别的团队的并不适合于自己的团队，我们要在前辈本提出和总结的软件工程方法论上结合实际的团队和项目选择选择适合自己团队的软件工程实践方法，结合队员和项目的特点做一些调整，而不是教条地全套照搬。<br>       &ensp;&ensp;&ensp;&ensp;2.书中的内容很全面充实，有着作者对软件工程深入的研究和思考。比如书中提到<br> &ensp;&ensp;&ensp;&ensp;       软件 = 程序 + 软件工程<br>        &ensp;&ensp;&ensp;&ensp;这样来描述软件，更形象更能体现的软件工程在软件生产中的重要性。软件狭义上讲就是一组能完成特定功能的程序的集合。这些程序之所以能很好的呈现应有得功能，得益于软件工程的各个参与者能按照合理的软件方法论很好地参与到整个软件的工程的生命周期中。<br>       &ensp;&ensp;&ensp;&ensp;3.书中第三章提到软件工程师的成长，我觉得非常亲切，提到发展和职业规划。我觉得对初级开发者或者想在软件领域有所建树的同学非常有用。其中提到一下几点：<br>          &ensp;&ensp;&ensp;&ensp;a.积累软件开发相关知识，提升技能<br>          &ensp;&ensp;&ensp;&ensp;b.积累问题领域的知识和经验<br>          &ensp;&ensp;&ensp;&ensp;c.对通用的软件设计和软件工程思想的理解<br>          &ensp;&ensp;&ensp;&ensp;d.提升职业技能(区别于技术能力)<br>          &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;    自我管理能力<br>          &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;    表达交流能力<br>          &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;    与人合作的精神<br>          &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;    按质按量完成任务的执行能力<br>          &ensp;&ensp;&ensp;&ensp;f.实际成果<br>          &ensp;&ensp;&ensp;&ensp;作者提到的这几点确实都很重要，对我个人职业成长有很大帮助。<br>       &ensp;&ensp;&ensp;&ensp;4.第十六章讲IT界的创新也很有意思，作者知识面之广，令人钦佩。其中作者以迷思方式对现实和历史中的一些观点和现象阐释了自己的深思和质疑，给人以启发，其实我感觉到我们一旦意识中形成某种固定的看法，就很难以新的不一样角度和态度去重新看待周围的事。如果我们能试着跳出自己原有固有的看法和准则，重新审视你周围的事物，你就会有不一样的收获！就如孔子讲”父为子隐，子为父隐“，如果我们从社会道德的标准去判断的话，我们会觉得这是十分不对的，但如果你站在个人和家庭的角度去观察，你就会觉得这是合乎人之常情的。<br>       &ensp;&ensp;&ensp;&ensp;上面只是我现在的几点感受，我觉得在我以后的工作中如果常思考，常去用新的思维来看问题，我得到的启发会越来越多！谢谢作者让我的思维更宽广，促使我有信心努力做一个优秀的软件工程师！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;阅读构建之法的过程很有趣，我也很享受，特别感谢作者，更要感谢好友的推荐！有时候喜欢读一些有趣且不缺乏专业性的书，可惜市面上这种书少之又少，有些讲得太专业，故弄玄虚，往往太偏于理论，而实际中很少能有用！有些又过于简单，东拼西凑，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>构建之法(笔记)-软件测试</title>
    <link href="http://yoursite.com/2016/03/20/Construction-method-note/"/>
    <id>http://yoursite.com/2016/03/20/Construction-method-note/</id>
    <published>2016-03-20T06:42:00.000Z</published>
    <updated>2016-06-10T14:25:12.793Z</updated>
    
    <content type="html"><![CDATA[<p>有关软件测试的整理</p>
<p>软件 = 程序 + 软件工程<br>软件(质量) = 程序(质量) + 软件工程(质量)</p>
<h2 id="软件测试">软件测试</h2><p>测试设计的方法分类：</p>
<ul>
<li><p>黑箱：从软件行为来设计软件测试</p>
</li>
<li><p>白箱： 从软件内部结构出发，使用软件内部结构及知识选择选择测试数据及具体的测试方法</p>
</li>
</ul>
<h2 id="按测试目的的分类：">按测试目的的分类：</h2><ul>
<li>功能性测试：</li>
</ul>
<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:left">价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>Unit Test</td>
<td style="text-align:left">单元测试-在最基本的功能/参数上验证程序的正确性</td>
</tr>
<tr>
<td>functional Test</td>
<td style="text-align:left">功能测试-验证模块的功能</td>
</tr>
<tr>
<td>Integrational Test</td>
<td style="text-align:left">集成测试-验证几个相互有依赖关系的模块的功能</td>
</tr>
<tr>
<td>Scenario Test</td>
<td style="text-align:left">场景测试-验证几个模块是否能够完成一个用户场景</td>
</tr>
<tr>
<td>System Test</td>
<td style="text-align:left">系统测试-对于整个系统功能的测试</td>
</tr>
<tr>
<td>Alpha/Beta Test</td>
<td style="text-align:left">外部软件测试人员在实际的用户环境中对软件进行全面的测试</td>
</tr>
</tbody>
</table>
<ul>
<li>非功能性测试</li>
</ul>
<table>
<thead>
<tr>
<th>测试名称</th>
<th>测试内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Stress/Load Test</td>
<td>压力测试-测试软件在负载情况下能否正常工作</td>
</tr>
<tr>
<td>Preformance Test</td>
<td>效能测试-测试软件的效能</td>
</tr>
<tr>
<td>Accessiblity Test</td>
<td>可访问性测试-测试软件是否向残疾用户提供了足够的辅助功能</td>
</tr>
<tr>
<td>Localization/Globalization Test</td>
<td>本地化/全球化测试</td>
</tr>
<tr>
<td>Compatibility Test</td>
<td>兼容性测试</td>
</tr>
<tr>
<td>Configuration Test</td>
<td>配置测试-测试软件在各种配置下能否正常运行</td>
</tr>
<tr>
<td>Usablity Test</td>
<td>测试软件是否好用</td>
</tr>
<tr>
<td>Security Test</td>
<td>软件安全性测试</td>
</tr>
</tbody>
</table>
<h2 id="按软件测试时机分类">按软件测试时机分类</h2><h3 id="测试烽火台">测试烽火台</h3><table>
<thead>
<tr>
<th>测试名称</th>
<th>测试内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Smoke Test</td>
<td>冒烟测试-测试不通过，则不能进行下一步工作</td>
</tr>
<tr>
<td>Build Vertification Test</td>
<td>验证构建是否通过测试</td>
</tr>
<tr>
<td>Acceptance Test</td>
<td>验收测试-全面考核某方面的功能/特性</td>
</tr>
</tbody>
</table>
<h3 id="不同的测试方法">不同的测试方法</h3><table>
<thead>
<tr>
<th>测试名称</th>
<th>测试内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Regression Test</td>
<td>回归测试-对一个新的版本，重新运行以往的测试用例，确认新版本相比 已知版本有无“退化”</td>
</tr>
<tr>
<td>Ad hoc(Exploratory) Test</td>
<td>随机测试的、探索性的测试 </td>
</tr>
<tr>
<td>Bug Bash</td>
<td>Bug大扫荡-全体成员参加的找“小强”活动</td>
</tr>
<tr>
<td>Buddy Test</td>
<td>伙伴测试-开发人员(伙伴)作为测试人员测试特定模块</td>
</tr>
</tbody>
</table>
<h2 id="具体的各种测试方法">具体的各种测试方法</h2><p>1.单元测试(Unit Test)</p>
<p>2.代码覆盖率测试(Code Coverage Analysis)<br>顺便记录一下相关的文章，下边的链接是infoQ上一篇关于代码覆盖率的文章<br><a href="http://www.infoq.com/cn/articles/code-coverage" target="_blank" rel="external">http://www.infoq.com/cn/articles/code-coverage</a></p>
<p>相关工具：<br>EMMA<br>EMMA 是一个用于检测和报告 JAVA 代码覆盖率的开源工具。它不但能很好的用于小型项目，很方便得得出覆盖率报告，而且适用于大型企业级别的项目。</p>
<p>使用ant脚本来生成emma的代码覆盖率的文章：<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-emma/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/java/j-lo-emma/</a></p>
<p>使用maven脚本来生成emma的代码覆盖率的文章：<br><a href="http://tech.meituan.com/emma.html" target="_blank" rel="external">http://tech.meituan.com/emma.html</a></p>
<p>3.构建验证性测试(BVT)</p>
<p>4.验收测试(Acceptance Test)</p>
<p>5.”探索式“的测试(Ad hoc Test)</p>
<p>6.回归测试(Regression Test)</p>
<p>7.场景/集成/系统测试(Scenario/Integration/System Test)</p>
<p>8.伙伴测试(Buddy Test)</p>
<p>9.效能测试(Performance Test)<br>  设计负载<br>  另用户满意测服务质量</p>
<p>10.压力测试(Stress Test)</p>
<p>11.易用性的测试(Usability Test)</p>
<p>12.“小强”大扫荡(Bug Bash)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关软件测试的整理&lt;/p&gt;
&lt;p&gt;软件 = 程序 + 软件工程&lt;br&gt;软件(质量) = 程序(质量) + 软件工程(质量)&lt;/p&gt;
&lt;h2 id=&quot;软件测试&quot;&gt;软件测试&lt;/h2&gt;&lt;p&gt;测试设计的方法分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;黑箱：从软件行为来设计软件测试&lt;/p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring框架简介</title>
    <link href="http://yoursite.com/2016/03/05/spring-01/"/>
    <id>http://yoursite.com/2016/03/05/spring-01/</id>
    <published>2016-03-05T15:27:59.000Z</published>
    <updated>2016-03-05T15:31:23.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-简介">1.简介</h3><pre><code><span class="keyword">spring</span>是优秀的开源框架，是为解决复杂的企业应用程序开发而创建的。
</code></pre><h3 id="2-_spring框架的构成和各个模块的作用和简述">2. spring框架的构成和各个模块的作用和简述</h3><p>spring框架有6个定义明确的模块组成，如下图所指示<br><img src="http://7xawio.com1.z0.glb.clouddn.com/spring_models.png" alt="spring 模块图"></p>
<ul>
<li><p>spring的容器<br>负责spring应用中Bean的创建，配置和管理，主要组件是 BeanFactory。BeanFactory使用控制反转（IOC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p>
</li>
<li><p>spring的AOP模块<br>面向切面编程，AOP可以帮助应用程序解耦，借助于AOP可以将应用的关注点（例如事务和安全）从它们所在的应用对象中解耦出来。</p>
</li>
<li>instrumentation监测器<br>spring-instrument模块提供了类的检测支持，并且类的加载器实现可以被用于特定应用服务中。spring-instrument-tomcat模块包含了Spring给Tomcat提供的监测代理。 </li>
<li><p>数据库访问与集成<br>封装了JDBC，提供了DAO<br>集成了第三方的ORM框架</p>
</li>
<li><p>web和远程调用<br>集成了市面上流行的MVC框架<br>web和远程调用模块自带了一个强大的MVC框架，有助于应用提升web层的松散耦合<br>远程调用集成了RMI，HESSION，Burlap，jax-ws<br>自带远程调用框架：HTTP invoker</p>
</li>
<li><p>测试<br>spring提供了测试模块来测试spring的应用。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-简介&quot;&gt;1.简介&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;spring&lt;/span&gt;是优秀的开源框架，是为解决复杂的企业应用程序开发而创建的。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-_spring框架的构成和各个模块的
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>生命游戏</title>
    <link href="http://yoursite.com/2016/02/28/lifegame/"/>
    <id>http://yoursite.com/2016/02/28/lifegame/</id>
    <published>2016-02-27T16:03:10.000Z</published>
    <updated>2016-11-04T02:14:27.705Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-_生命游戏简介：">1. 生命游戏简介：</h3><p>  生命游戏(Life Game)是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。它是由3条规则构成的二维元胞自动机(2D Cellular Automata)。</p>
<h3 id="2-_原理">2. 原理</h3><p>在有N*N个格子的平面上，把每一个格子都可以看成是一个生命体，每个生命都有生和死两种状态，如果该格子生就显示蓝色，死则显示白色。每一个格子旁边都有邻居格子存在，如果我们把3*3的9个格子构成的正方形看成一个基本单位的话，那么这个正方形中心的格子的邻居就是它旁边的8个格子。<br>每个格子的生死遵循下面的原则：<br>1． 如果一个细胞周围有3个细胞为生（一个细胞周围共有8个细胞），则该细胞为生（即该细胞若原先为死，则转为生，若原先为生，则保持不变） 。<br>2． 如果一个细胞周围有2个细胞为生，则该细胞的生死状态保持不变；<br>3． 在其它情况下，该细胞为死（即该细胞若原先为生，则转为死，若原先为死，则保持不变）</p>
<h3 id="3-_代码实现">3. 代码实现</h3><p>功能：</p>
<h4 id="1-全屏显示滑翔机发射器的演化过程如下图：">1.全屏显示滑翔机发射器的演化过程如下图：</h4><p><img src="http://7xawio.com1.z0.glb.clouddn.com/lifegame_plant.png" alt="滑翔机发射器演示图"></p>
<h4 id="2-_按“Esc”键程序退出">2. 按“Esc”键程序退出</h4><blockquote>
<p>类说明：<br>Canvas.java       画布类，封装了细胞演化的算法<br>Cell.java        细胞单元的类<br>Constant.java    常量类<br>MainFrame.java   主控程序</p>
</blockquote>
<p>算法思路：<br>用三个链表，cellList(活着的细胞)，bornCellList(刚出生的细胞)，deadCellList（死去得细胞），遍历cellList，对每个细胞按规则进行繁衍，繁衍一代后，处理cellList，从中去掉deadCellList，加入bornCellList。在如此可完成一轮的繁衍，其中还要用到一个二维数组flagArr来保存细胞状态。<br>二维数组表示细胞的状态<br>取值为1 和 2   1:当代存活的细胞      2:刚产生的下一代细胞<br>int [][] flagArr;<br>活着的细胞链表<br>List<cell> cellList = new LinkedList<cell>();<br>新生代的细胞链表<br>List<cell> bornCellList = new LinkedList<cell>();<br>死亡的细胞链表<br>List<cell> deadCellList = new LinkedList<cell>();</cell></cell></cell></cell></cell></cell></p>
<ol>
<li>清空bornCellList，deadCellList</li>
<li>遍历cellList，对每个细胞按规则进行演化</li>
<li>2步骤后deadCellList里面会有一些死去的细胞，遍历deadCellList，将其中细胞的状态标记到flagArr中。<pre><code><span class="keyword">for</span>(Cell <span class="keyword">ce</span><span class="variable">l:deadCellList</span>)
    flagArr[cel.row][cel.<span class="built_in">col</span>] = <span class="number">0</span>;
</code></pre>从活着的细胞列表中去掉在下一代将要死掉的<br>cellList.removeAll(deadCellList);<br>将下一代新生成的细胞标记为当代存活的细胞<pre><code><span class="keyword">for</span>(Cell <span class="keyword">ce</span><span class="variable">l:bornCellList</span>)
    flagArr[cel.row][cel.<span class="built_in">col</span>]=<span class="number">1</span>;
</code></pre>将新生成的细胞加入到活着的细胞列表中<pre><code>cellList.addAll<span class="comment">(bornCellList)</span>;
</code></pre></li>
</ol>
<p>重复执行1到3的步骤，每重复一次，重绘整个细胞面板<br>Canvas代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.difeng.lifegame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.difeng.lifegame.Constant.CELL_HEIGHT;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.difeng.lifegame.Constant.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> difeng</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Canvas</span> <span class="keyword">extends</span> <span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="comment">//取值为1 和 2   1:当代存活的细胞      2:刚产生的下一代细胞</span></span><br><span class="line">	<span class="keyword">int</span> [][] flagArr;</span><br><span class="line">	<span class="comment">//活着的细胞</span></span><br><span class="line">	List&lt;Cell&gt; cellList = <span class="keyword">new</span> LinkedList&lt;Cell&gt;();</span><br><span class="line">	<span class="comment">//新生的细胞</span></span><br><span class="line">	List&lt;Cell&gt; bornCellList = <span class="keyword">new</span> LinkedList&lt;Cell&gt;();</span><br><span class="line">	<span class="comment">//死亡的细胞</span></span><br><span class="line">	List&lt;Cell&gt; deadCellList = <span class="keyword">new</span> LinkedList&lt;Cell&gt;();</span><br><span class="line">	<span class="comment">//方向数组</span></span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">int</span> [][] dir = &#123;</span><br><span class="line">			&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">			&#123;-<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">			&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">			&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">//滑翔机发射器的图案矩阵</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[][] plant = &#123;</span><br><span class="line">    		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,	</span><br><span class="line">    		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,	</span><br><span class="line">    		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,	</span><br><span class="line">    		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,	</span><br><span class="line">    		&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,	</span><br><span class="line">    		&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,	</span><br><span class="line">    		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,	</span><br><span class="line">    		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    		&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;	</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Canvas</span><span class="params">()</span></span>&#123;</span><br><span class="line">		setBackground(Color.black);</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * </span><br><span class="line">	 * 初始化</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">		CELL_WIDTH = <span class="number">20</span>;</span><br><span class="line">		CELL_HEIGHT = <span class="number">20</span>;</span><br><span class="line">		COL_NUM = SCREEN_WIDTH/CELL_WIDTH;</span><br><span class="line">		ROW_NUM= SCREEN_HEIGHT/CELL_HEIGHT;</span><br><span class="line">		flagArr = <span class="keyword">new</span> <span class="keyword">int</span>[ROW_NUM][COL_NUM];</span><br><span class="line">		<span class="comment">//滑翔机发射器的起始坐标</span></span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">5</span>,y=<span class="number">5</span>;</span><br><span class="line">		<span class="comment">//将滑翔机发射器的图案初始化到</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; plant.length;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; plant[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(plant[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">					<span class="keyword">int</span> r = x + i;</span><br><span class="line">					<span class="keyword">int</span> col = y + j;</span><br><span class="line">					<span class="keyword">if</span>(flagArr[r][col]==<span class="number">0</span>)&#123;</span><br><span class="line">						Cell cel = <span class="keyword">new</span> Cell(r, col,<span class="keyword">true</span>);</span><br><span class="line">						cellList.add(cel);</span><br><span class="line">						flagArr[r][col] = <span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evolution</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//清空中间计算的列表</span></span><br><span class="line">		bornCellList.clear();</span><br><span class="line">		deadCellList.clear();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//遍历当代细胞列表，让细胞开始繁衍生长，计算下一代的状态</span></span><br><span class="line">		<span class="keyword">for</span>(Cell cel:cellList)&#123;</span><br><span class="line">			<span class="comment">//细胞生长</span></span><br><span class="line">			cellEvolution(cel); </span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将下一代将要死掉的细胞标记为死亡</span></span><br><span class="line">		<span class="keyword">for</span>(Cell cel:deadCellList)&#123;</span><br><span class="line">			flagArr[cel.row][cel.col] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//从活着的细胞列表中去掉在下一代将要死掉的</span></span><br><span class="line">		cellList.removeAll(deadCellList);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将下一代新生成的细胞标记为当代存活的细胞</span></span><br><span class="line">		<span class="keyword">for</span>(Cell cel:bornCellList)&#123;</span><br><span class="line">			flagArr[cel.row][cel.col]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将新生成的细胞加入到活着的细胞列表中</span></span><br><span class="line">		cellList.addAll(bornCellList);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.paintComponent(g);</span><br><span class="line">		<span class="comment">//绘制细胞棋盘</span></span><br><span class="line">		g.setColor(<span class="keyword">new</span> Color(<span class="number">33</span>,<span class="number">33</span>,<span class="number">33</span>));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=ROW_NUM;i++)&#123;</span><br><span class="line">			g.drawLine(<span class="number">0</span>,i*CELL_HEIGHT,SCREEN_WIDTH,i*CELL_HEIGHT);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=COL_NUM;i++)&#123;</span><br><span class="line">			g.drawLine(i*CELL_WIDTH,<span class="number">0</span>,i*CELL_WIDTH,SCREEN_HEIGHT);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//开始画细胞</span></span><br><span class="line">		g.setColor(Color.GREEN);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cellList.size();i++)&#123;</span><br><span class="line">			Cell cel = cellList.get(i);</span><br><span class="line">			<span class="keyword">if</span>(cel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				g.fill3DRect(cel.col*CELL_WIDTH,cel.row*CELL_HEIGHT,CELL_WIDTH,CELL_HEIGHT,<span class="keyword">true</span>);		</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 细胞繁衍</span><br><span class="line">	 * <span class="doctag">@param</span> cel</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">cellEvolution</span><span class="params">(Cell cel)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> col = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> cellNum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dir.length;i++)&#123;</span><br><span class="line">			row = cel.row + dir[i][<span class="number">0</span>];</span><br><span class="line">			col = cel.col + dir[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span>(row&gt;-<span class="number">1</span> &amp;&amp; row&lt;ROW_NUM &amp;&amp; col&gt;-<span class="number">1</span> &amp;&amp; col&lt;COL_NUM)&#123;</span><br><span class="line">				<span class="keyword">if</span>(flagArr[row][col]==<span class="number">1</span>)&#123;</span><br><span class="line">					cellNum++;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="comment">//此位置周围有三个存活的细胞且此位置暂无生成的新细胞，则此位置应产生一个细胞</span></span><br><span class="line">					<span class="keyword">if</span>(computeRound(row,col) == <span class="number">3</span> &amp;&amp; flagArr[row][col] != <span class="number">2</span>)&#123;</span><br><span class="line">						Cell newCell = <span class="keyword">new</span> Cell(row, col,<span class="keyword">true</span>);</span><br><span class="line">						<span class="comment">//标志此位置新生成一个细胞</span></span><br><span class="line">						flagArr[row][col] = <span class="number">2</span>;</span><br><span class="line">						bornCellList.add(newCell);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;  </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//细胞死亡判断条件</span></span><br><span class="line">		<span class="keyword">if</span>(cellNum &lt; <span class="number">2</span> || cellNum &gt; <span class="number">3</span>)&#123;</span><br><span class="line">			deadCellList.add(cel);  </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 计算一个细胞周围有多少个存活的细胞</span><br><span class="line">	 * <span class="doctag">@param</span> row</span><br><span class="line">	 * <span class="doctag">@param</span> col</span><br><span class="line">	 * <span class="doctag">@return</span></span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">computeRound</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> cellNum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> cl=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;dir.length;i++)&#123;</span><br><span class="line">			r = row + dir[i][<span class="number">0</span>];</span><br><span class="line">			cl =  col + dir[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span>(r &gt; -<span class="number">1</span> &amp;&amp; r &lt; ROW_NUM &amp;&amp; cl &gt; -<span class="number">1</span> &amp;&amp; cl &lt; COL_NUM)&#123;</span><br><span class="line">				<span class="keyword">if</span>(flagArr[r][cl]==<span class="number">1</span>)&#123;</span><br><span class="line">					cellNum++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cellNum;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(REFRESH_INTERVALS);</span><br><span class="line">				<span class="comment">//重新绘制</span></span><br><span class="line">				repaint();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			evolution();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Cell代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.difeng.lifegame;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> difeng</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>  row;</span><br><span class="line">      <span class="keyword">int</span>  col;</span><br><span class="line">      <span class="keyword">boolean</span> islive;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">boolean</span> islive)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.row = row;</span><br><span class="line">		<span class="keyword">this</span>.col = col;</span><br><span class="line">		<span class="keyword">this</span>.islive = islive;</span><br><span class="line">	&#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Constant的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.difeng.lifegame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Dimension;</span><br><span class="line"><span class="keyword">import</span> java.awt.Toolkit;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> difeng</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constant</span> </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> SCREEN_WIDTH = (<span class="keyword">int</span>) dimension.getWidth();</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> SCREEN_HEIGHT = (<span class="keyword">int</span>)dimension.getHeight();</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ROW_NUM;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> COL_NUM;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CELL_WIDTH = <span class="number">20</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CELL_HEIGHT = <span class="number">20</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REFRESH_INTERVALS = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>主控程序:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.difeng.lifegame;</span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.GraphicsDevice;</span><br><span class="line"><span class="keyword">import</span> java.awt.GraphicsEnvironment;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> difeng</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		JFrame life = <span class="keyword">new</span> JFrame();</span><br><span class="line">		Canvas canvas = <span class="keyword">new</span> Canvas();</span><br><span class="line">		GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();</span><br><span class="line">	    life.getContentPane().add(canvas,BorderLayout.CENTER);</span><br><span class="line">	    life.setUndecorated(<span class="keyword">true</span>);</span><br><span class="line">	    <span class="comment">//设置全屏显示</span></span><br><span class="line">	    gd.setFullScreenWindow(life);</span><br><span class="line">	    <span class="comment">//添加程序退出的事件监听</span></span><br><span class="line">	    life.addKeyListener(<span class="keyword">new</span> KeyAdapter() &#123;</span><br><span class="line">	    	<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				<span class="keyword">super</span>.keyPressed(e);</span><br><span class="line">				<span class="keyword">if</span>(e.getKeyCode()==KeyEvent.VK_ESCAPE)&#123;</span><br><span class="line">					System.exit(<span class="number">0</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	    <span class="keyword">new</span> Thread(canvas).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4-_总结">4. 总结</h3><p>1.搞清楚问题的本质，也就是原理部分。<br>2.然后思考寻找合理的数据结构。再考虑类的设计和协作。<br>3.coding<br>生命游戏还有其他游戏的算法来高效的实现，上述只是自己刚接触时的想法。不过这个游戏确实挺有意思的，其实它也属于分形学。有兴趣的朋友还可以阅读《混沌与分形》这本书。也可以去看看极客们制作的<a href="https://www.douban.com/note/54115757/" target="_blank" rel="external">分形图形</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-_生命游戏简介：&quot;&gt;1. 生命游戏简介：&lt;/h3&gt;&lt;p&gt;  生命游戏(Life Game)是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。它是由3条规则构成的二维元胞自动机(2D Cellular Automata)。&lt;/p&gt;
&lt;h3 id=&quot;2-_
    
    </summary>
    
    
      <category term="分形学" scheme="http://yoursite.com/tags/%E5%88%86%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>CountDownlatch的使用</title>
    <link href="http://yoursite.com/2016/01/14/countdownlatch-demo/"/>
    <id>http://yoursite.com/2016/01/14/countdownlatch-demo/</id>
    <published>2016-01-14T15:22:19.000Z</published>
    <updated>2016-01-15T01:26:26.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="适用场景：">适用场景：</h3><p>一个任务的执行要等到所有任务都执行完后再做操作。</p>
<h3 id="具体用法">具体用法</h3><p>以下面的场景为例：</p>
<table>
<thead>
<tr>
<th>任务</th>
<th style="text-align:right">执行条件   </th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td style="text-align:right">无</td>
</tr>
<tr>
<td>B</td>
<td style="text-align:right">无</td>
</tr>
<tr>
<td>C</td>
<td style="text-align:right">无</td>
</tr>
<tr>
<td>D</td>
<td style="text-align:right">A、B、C全部执行完</td>
</tr>
</tbody>
</table>
<p>实现步骤：<br>1.在主线程处新建线程池，用于执行任务。<br>2.新建CountDownLatch实例latch，指定count值。<br>3.A、B、C三个任务共用同一个CountDownLatch实例latch，在A、B、C的每个任务执行方法的最后调用CountDownLatch的countDown()方法。<br>4.在要等待的任务D的执行位置的开始处调用CountDownLatch实例latch的await()方法来等待A、B、C三个任务的执行完成。</p>
<p><strong>说明</strong>：<br>  具体使用时，A、B、C、D可为独立于主线程的四个单独的线程，也可以是A、B、C是三个独立线程，而D做为主线程来等待A、B、C的完成。</p>
<p>下边以一个具体的实例来做一个示范。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> difeng</span><br><span class="line"> * </span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">		CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</span><br><span class="line">		Producer worker1 = <span class="keyword">new</span> Producer(<span class="string">"producer1"</span>,<span class="string">"partA"</span>,countDownLatch);	</span><br><span class="line">		Producer worker2 = <span class="keyword">new</span> Producer(<span class="string">"producer2"</span>,<span class="string">"partB"</span>,countDownLatch);	</span><br><span class="line">		Producer worker3 = <span class="keyword">new</span> Producer(<span class="string">"producer3"</span>,<span class="string">"partC"</span>,countDownLatch);</span><br><span class="line">		executorService.execute(worker1);</span><br><span class="line">		executorService.execute(worker2);</span><br><span class="line">		executorService.execute(worker3);</span><br><span class="line">	        executorService.execute(<span class="keyword">new</span> AssemblyWorker(countDownLatch));</span><br><span class="line">		executorService.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 构件生产者</span><br><span class="line"> * <span class="doctag">@author</span> difeng</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	CountDownLatch countDownLatch;</span><br><span class="line">	String partName;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(String name,String partName,CountDownLatch countDownLatch)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.partName = partName;</span><br><span class="line">		<span class="keyword">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"I am "</span> + <span class="keyword">this</span>.name + <span class="string">",I am  making the "</span> + <span class="keyword">this</span>.partName);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>) * <span class="number">1000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"I am "</span> + <span class="keyword">this</span>.name + <span class="string">",My work is done,I submit the "</span> + <span class="keyword">this</span>.partName + <span class="string">" to AssemblyWorker"</span>);</span><br><span class="line">		<span class="keyword">this</span>.countDownLatch.countDown();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 组装者</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssemblyWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	CountDownLatch countDownLatch;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AssemblyWorker</span><span class="params">(CountDownLatch countDownLatch)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"I am AssemblyWorker,I am waitting for the workers to submit their component"</span>);</span><br><span class="line">			<span class="keyword">this</span>.countDownLatch.await();</span><br><span class="line">			System.out.println(<span class="string">"all work has done,I am assembled"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">I am producer2,I am  making the partB</span><br><span class="line">I am producer3,I am  making the partC</span><br><span class="line">I am producer1,I am  making the partA</span><br><span class="line">I am producer3,My work is done,I submit the partC to AssemblyWorker</span><br><span class="line">I am AssemblyWorker,I am waitting <span class="keyword">for</span> the workers to submit their component</span><br><span class="line">I am producer1,My work is done,I submit the partA to AssemblyWorker</span><br><span class="line">I am producer2,My work is done,I submit the partB to AssemblyWorker</span><br><span class="line">all work has done,I am assembled</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;适用场景：&quot;&gt;适用场景：&lt;/h3&gt;&lt;p&gt;一个任务的执行要等到所有任务都执行完后再做操作。&lt;/p&gt;
&lt;h3 id=&quot;具体用法&quot;&gt;具体用法&lt;/h3&gt;&lt;p&gt;以下面的场景为例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th style=
    
    </summary>
    
    
      <category term="java并发编程" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>jmeter使用</title>
    <link href="http://yoursite.com/2016/01/10/jmeter-test/"/>
    <id>http://yoursite.com/2016/01/10/jmeter-test/</id>
    <published>2016-01-10T12:15:03.000Z</published>
    <updated>2016-01-10T12:18:56.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-简介：">1.简介：</h3><p>JMeter是Apache下开源的性能测试工具组织的开放源代码项目，它是功能和性能测试的工具，JMeter是Apache下开源的性能测试工具组织的开放源代码项目，它是功能和性能测试的工具，Jmeter可以用来测试性能静态和动态的资源（Web服务（SOAP/ REST），网页动态语言PHP，Java和ASP.NET，文件等，Java对象，数据库和查询，FTP服务器和更多）。它可以被用来模拟一个重负载作用于服务器，组服务器，网络或对象，以测试它的强度或以分析在不同负载类型的整体性能。并且可以用它做性能的图形分析或重并发负载下测试服务器/脚本/对象的行为。<br>官网地址<a href="http://jmeter.apache.org/" target="_blank" rel="external">http://jmeter.apache.org/</a></p>
<h3 id="2-使用">2.使用</h3><h4 id="2-1-web性能测试，这里以静态web资源服务器为例进行测试。">2.1.web性能测试，这里以静态web资源服务器为例进行测试。</h4><h4 id="2-1-1_打开jmeter性能测试工具如下">2.1.1 打开jmeter性能测试工具如下</h4><p><img src="http://7xawio.com1.z0.glb.clouddn.com/jmeter_web_wecolme.png" alt="jmeter欢迎界面"></p>
<h4 id="2-1-2_新建测试计划(Test_Plan)">2.1.2 新建测试计划(Test Plan)</h4><p>a.先建线程组<br><img src="http://7xawio.com1.z0.glb.clouddn.com/jmeter_web_thread_group.png" alt="新建线程组"><br>b.在线程组上可以添加<br>逻辑控制（Logic Controller）<br>配置元件（Config Elements）<br>实例产生控制器（Sample Generating Controllers）<br>监听器(Listener)<br>定时器（Timer）<br>前置处理器<br>后置处理器</p>
<p>c.设置负载信息<br>线程属性信息设置</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>线程数</td>
<td>线程组中线程的个数</td>
</tr>
<tr>
<td>Ramp-up period</td>
<td>用于告知JMeter 要在多长时间内建立全部的线程。默认值是0。如果未指定ramp-up period ，也就是说ramp-up period 为零， JMeter 将立即建立所有线程，假设ramp-up period 设置成T 秒， 全部线程数设置成N个， JMeter 将每隔T/N秒建立一个线程。 </td>
</tr>
<tr>
<td>循环次数</td>
<td>请求发生的重复次数，若线程数为10,循环次数为10,则总的请求次数为10*10=100个</td>
</tr>
</tbody>
</table>
<h4 id="2-1-3_下面是以mina的SocketSever为例，简单介绍一下使用方法-">2.1.3 下面是以mina的SocketSever为例，简单介绍一下使用方法.</h4><p>a.先编写测试的代码<br>  jmeter提供了抽象的实例产生器AbstractJavaSamplerClient,我们只要新建自己的实例发生器并继承于AbstractJavaSamplerClient类,并实现其抽象方法<br>public SampleResult runTest(JavaSamplerContext arg0)，在此方法中实现我们实例发生器的调用，并返回结果对象SampleResult。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.samplers.SampleResult;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@Description</span>:TODO</span><br><span class="line"> * <span class="doctag">@author</span>:difeng</span><br><span class="line"> * <span class="doctag">@time</span>:2015年12月20日 下午11:16:39</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClient</span> <span class="keyword">extends</span> <span class="title">AbstractJavaSamplerClient</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> SampleResult <span class="title">runTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line">		SampleResult sr = <span class="keyword">new</span> SampleResult();</span><br><span class="line">		<span class="keyword">boolean</span> result = <span class="keyword">true</span>;</span><br><span class="line">		<span class="comment">//测试用例的核心逻辑</span></span><br><span class="line">		<span class="comment">//测试用例开始</span></span><br><span class="line">		sr.sampleStart();</span><br><span class="line">		<span class="comment">//测试用例执行</span></span><br><span class="line">		MinaClient minaClient = <span class="keyword">new</span> MinaClient();</span><br><span class="line">		result = minaClient.search();</span><br><span class="line">		<span class="comment">//测试用例结果</span></span><br><span class="line">		sr.setSuccessful(result);</span><br><span class="line">		<span class="comment">//测试用例结束</span></span><br><span class="line">		sr.sampleEnd();</span><br><span class="line">		<span class="keyword">return</span> sr;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 测试开始</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;      </span><br><span class="line">		start = System.currentTimeMillis();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 测试结束</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardownTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line">		end = System.currentTimeMillis();</span><br><span class="line">		System.out.println(<span class="string">"[time:"</span> + (end - start) / <span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>mina 的server代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.acsno.jmeter_data;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.filter.codec.ProtocolCodecFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.filter.codec.textline.TextLineCodecFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.transport.socket.nio.NioSocketAcceptor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@Description</span>:TODO</span><br><span class="line"> * <span class="doctag">@author</span>:difeng</span><br><span class="line"> * <span class="doctag">@time</span>:2016年1月7日 下午8:42:12</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinaServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		NioSocketAcceptor acceptor = <span class="keyword">new</span> NioSocketAcceptor(); </span><br><span class="line">		MinaServerHandler handler = <span class="keyword">new</span> MinaServerHandler();</span><br><span class="line">		acceptor.setHandler(handler);  </span><br><span class="line">		<span class="comment">//创建接收数据的过滤器  </span></span><br><span class="line">        DefaultIoFilterChainBuilder chain = acceptor.getFilterChain();  </span><br><span class="line">        <span class="comment">//设定这个过滤器将一行一行(/r/n)的读取数据  </span></span><br><span class="line">        chain.addLast(<span class="string">"myChin"</span>, <span class="keyword">new</span> ProtocolCodecFilter(<span class="keyword">new</span>  </span><br><span class="line">        TextLineCodecFactory()));  </span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			acceptor.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8080</span>));</span><br><span class="line">			System.out.println(<span class="string">"mina socket server start success!"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.mina.core.service.IoHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.core.session.IdleStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.core.session.IoSession;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@Description</span>:mina socket server </span><br><span class="line"> * <span class="doctag">@author</span>:difeng</span><br><span class="line"> * <span class="doctag">@time</span>:2016年1月7日 下午8:44:41</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinaServerHandler</span>  <span class="keyword">extends</span> <span class="title">IoHandlerAdapter</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * recieve message</span><br><span class="line">     * </span><br><span class="line">     */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(IoSession session, Object message)</span></span><br><span class="line">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(message);</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"hello"</span>.equals(message))&#123;</span><br><span class="line">		&#125;</span><br><span class="line">		session.write(<span class="string">"true"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionClosed</span><span class="params">(IoSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"会话关闭"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(IoSession session, Throwable cause)</span>  </span><br><span class="line">            <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"会话异常"</span>);  </span><br><span class="line">        <span class="keyword">super</span>.exceptionCaught(session, cause);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageSent</span><span class="params">(IoSession iosession, Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"服务端消息发送"</span>);  </span><br><span class="line">        <span class="keyword">super</span>.messageSent(iosession, obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(IoSession iosession)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"会话创建"</span>);  </span><br><span class="line">        <span class="keyword">super</span>.sessionCreated(iosession);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionIdle</span><span class="params">(IoSession iosession, IdleStatus idlestatus)</span>  </span><br><span class="line">            <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"会话休眠"</span>);  </span><br><span class="line">        <span class="keyword">super</span>.sessionIdle(iosession, idlestatus);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionOpened</span><span class="params">(IoSession iosession)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"会话打开"</span>);  </span><br><span class="line">        <span class="keyword">super</span>.sessionOpened(iosession);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>mina client端的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.core.future.ConnectFuture;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.core.service.IoConnector;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.filter.codec.ProtocolCodecFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.filter.codec.textline.TextLineCodecFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.transport.socket.nio.NioSocketConnector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@Description</span>:mina socket client</span><br><span class="line"> * <span class="doctag">@author</span>:difeng</span><br><span class="line"> * <span class="doctag">@time</span>:2016年1月7日 下午8:45:30</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinaClient</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> IoConnector connector;  </span><br><span class="line">	<span class="keyword">private</span> MinaClientHandler minaClientHandler;</span><br><span class="line">	<span class="keyword">private</span> ConnectFuture connFuture;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MinaClient</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">		connector = <span class="keyword">new</span> NioSocketConnector();  </span><br><span class="line">		minaClientHandler = <span class="keyword">new</span> MinaClientHandler();</span><br><span class="line">		connector.setHandler(minaClientHandler);  </span><br><span class="line">		 <span class="comment">// 创建接收数据的过滤器  </span></span><br><span class="line">        DefaultIoFilterChainBuilder chain = connector.getFilterChain();  </span><br><span class="line">        <span class="comment">//设定这个过滤器将一行一行(/r/n)的读取数据  </span></span><br><span class="line">        chain.addLast(<span class="string">"myChin"</span>, <span class="keyword">new</span> ProtocolCodecFilter(<span class="keyword">new</span>  </span><br><span class="line">        TextLineCodecFactory()));  </span><br><span class="line">        <span class="comment">// 设置链接超时时间       </span></span><br><span class="line"><span class="comment">//	    connector.setConnectTimeoutMillis(60*1000); </span></span><br><span class="line">		System.out.println(<span class="string">"TCP 客户端启动"</span>);  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> MinaClientHandler <span class="title">getMinaClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> minaClientHandler;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinaClientHandler</span><span class="params">(MinaClientHandler minaClientHandler)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.minaClientHandler = minaClientHandler;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">		connFuture = connector.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>,<span class="number">8080</span>));  </span><br><span class="line">		connFuture.awaitUninterruptibly(<span class="number">5</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">		connFuture.getSession().write(message);</span><br><span class="line">		System.out.println(<span class="string">"send message :"</span>+message);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.connector.dispose();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.mina.core.service.IoHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.core.session.IdleStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.mina.core.session.IoSession;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinaClientHandler</span> <span class="keyword">extends</span> <span class="title">IoHandlerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String result;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MinaClientHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="annotation">@Override</span>  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(IoSession iosession, Object message)</span>  </span><br><span class="line">			<span class="keyword">throws</span> Exception </span>&#123;   </span><br><span class="line">		System.out.println(<span class="string">"客户端收到消息"</span> + message); </span><br><span class="line">		result = (String) message;</span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.result = result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="annotation">@Override</span>  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(IoSession session, Throwable cause)</span>  </span><br><span class="line">			<span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">		System.out.println(<span class="string">"客户端异常"</span>);  </span><br><span class="line">		<span class="keyword">super</span>.exceptionCaught(session, cause);  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="annotation">@Override</span>  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageSent</span><span class="params">(IoSession iosession, Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">		System.out.println(<span class="string">"客户端消息发送"</span>);  </span><br><span class="line">		<span class="keyword">super</span>.messageSent(iosession, obj);  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="annotation">@Override</span>  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionClosed</span><span class="params">(IoSession iosession)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">		System.out.println(<span class="string">"客户端会话关闭"</span>);  </span><br><span class="line">		<span class="keyword">super</span>.sessionClosed(iosession);  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="annotation">@Override</span>  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(IoSession iosession)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">		System.out.println(<span class="string">"客户端会话创建"</span>);  </span><br><span class="line">		<span class="keyword">super</span>.sessionCreated(iosession);  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="annotation">@Override</span>  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionIdle</span><span class="params">(IoSession iosession, IdleStatus idlestatus)</span>  </span><br><span class="line">			<span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">		System.out.println(<span class="string">"客户端会话休眠"</span>);  </span><br><span class="line">		<span class="keyword">super</span>.sessionIdle(iosession, idlestatus);  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="annotation">@Override</span>  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionOpened</span><span class="params">(IoSession iosession)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">		System.out.println(<span class="string">"客户端会话打开"</span>);  </span><br><span class="line">		<span class="keyword">super</span>.sessionOpened(iosession);  </span><br><span class="line">	&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.将编写好的代码编译完打成jar包,并且将其放到jmeter的\lib\ext目录中，依赖的jar包可以单独全都导出来放到本地的一个目录中，测试计划页面的右下方添加相应的依赖包就可以。如下图所示：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/jmeter_dependency.png" alt="加载依赖jar包"><br>3.将mina的socket server启动起来，在线程组里添加的java请求并选择类名称如下图所示：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/jmeter_mina_choose_request.png" alt="选择测试类"></p>
<p>4.添加聚合报告完后，就开以开始测试了。<br>测试过程截图如下：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/jmeter_mina_test.png" alt="测试实例图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-简介：&quot;&gt;1.简介：&lt;/h3&gt;&lt;p&gt;JMeter是Apache下开源的性能测试工具组织的开放源代码项目，它是功能和性能测试的工具，JMeter是Apache下开源的性能测试工具组织的开放源代码项目，它是功能和性能测试的工具，Jmeter可以用来测试性能静态和动
    
    </summary>
    
    
      <category term="jmeter" scheme="http://yoursite.com/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>redis单机多实例使用</title>
    <link href="http://yoursite.com/2016/01/03/redis-demo/"/>
    <id>http://yoursite.com/2016/01/03/redis-demo/</id>
    <published>2016-01-03T12:36:16.000Z</published>
    <updated>2016-03-21T01:47:47.679Z</updated>
    
    <content type="html"><![CDATA[<p>redis单机多实例的配置,其实也就是在多个端口上启动redis实例，需要注意以下问题。<br>1.不同端口写不同配置文件<br>   如下：<br>   redis_6377.conf<br>   redis_6378.conf<br>   redis_6379.conf<br>2.在不同的配置文件中配置各自的策略<br>  注意以下几点<br>  1.端口配置<br>  2.pid文件的配置，不同端口配不同名字，最好加端口号，以便区分。<br>  3.log文件路径的配置<br>  4.持久化的文件配置，不可重复<br>    这里选择rbd<br>启动的时候<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server /path/to/redis.conf</span><br></pre></td></tr></table></figure></p>
<p>顺便说一下redis的持久化方式<br>分两种<br>1.rdb模式<br> 其实就是对内存中的东西按一些策略定期做snapshot,也就是快照<br>rdb保存的是二进制文件，是redis的默认方式。<br>配置如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save &#60;seconds&#62; &#60;changes&#62;&#10;#100&#31186;&#20869;&#33267;&#23569;&#26377;10&#20010;key&#20540;&#21457;&#29983;&#25913;&#21464;&#25165;&#20570;&#25345;&#20037;&#21270;&#10;save 100  10 &#10;#&#26368;&#26032;&#30340;&#24555;&#29031;&#20445;&#23384;&#22833;&#36133;&#26102;&#20572;&#27490;&#20889;&#25805;&#20316;&#10;stop-writes-on-bgsave-error yes&#10;#&#20570;&#24555;&#29031;&#26102;&#26159;&#19981;&#26159;&#38656;&#35201;&#20570;&#21387;&#32553;&#10;rdbcompression yes&#10;#&#25968;&#25454;&#26657;&#39564;&#65292;&#20445;&#35777;&#25968;&#25454;&#27491;&#30830;&#24615;&#10;rdbchecksum yes&#10;#&#24555;&#29031;&#30340;&#25991;&#20214;&#21517;&#10;dbfilename dump.rdb&#10;#&#23384;&#25918;&#24555;&#29031;&#30340;&#30446;&#24405;&#10;dir /var/lib/redis</span><br></pre></td></tr></table></figure></p>
<p>2.Append only file（AOF）的方式<br>  它将每一步操作的命令强制保存到磁盘上，持久性比较好，但对于写比较频繁的情况不适合，不推荐。 配置如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly no&#10;#append only file&#30340;&#21517;&#31216;,&#40664;&#35748;&#20026;appendonly.aof&#10;appendfilename &#34;appendonly.aof&#34;&#10;#&#22312;&#26085;&#24535;&#37325;&#20889;&#26102;&#65292;&#19981;&#36827;&#34892;&#21629;&#20196;&#36861;&#21152;&#25805;&#20316;&#65292;&#32780;&#21482;&#26159;&#23558;&#20854;&#25918;&#22312;&#32531;&#20914;&#21306;&#37324;&#65292;&#36991;&#20813;&#19982;&#21629;&#20196;&#30340;&#36861;&#21152;&#36896;&#25104;DISK IO&#19978;&#30340;&#20914;&#31361;&#12290;&#10;no-appendfsync-on-rewrite yes</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis单机多实例的配置,其实也就是在多个端口上启动redis实例，需要注意以下问题。&lt;br&gt;1.不同端口写不同配置文件&lt;br&gt;   如下：&lt;br&gt;   redis_6377.conf&lt;br&gt;   redis_6378.conf&lt;br&gt;   redis_6379.conf
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>log4j的使用</title>
    <link href="http://yoursite.com/2015/12/27/log4j-study/"/>
    <id>http://yoursite.com/2015/12/27/log4j-study/</id>
    <published>2015-12-27T14:32:36.000Z</published>
    <updated>2016-01-06T13:33:39.260Z</updated>
    
    <content type="html"><![CDATA[<p>log4j作为日志工具，想必大家已经非常熟悉，我们在日常的项目开发中经常会用到，它的功能很强大，我就不一一熬述了，把我觉得比较常用的功能总结一下。</p>
<h4 id="1-根日志属性项">1.根日志属性项</h4><pre><code><span class="title">level</span> 日志最低级别
后面可跟多个appender
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger  =   [ level ],appenderName1,appenderName2,...</span><br></pre></td></tr></table></figure>
<p>如下配置意思：定义输出源A1，它的最低日志级别为DEBUG，然后将它附到根日志的属性后面去，A1的日志文件的路径为E:\debug.log<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#### 日志级别 </span><br><span class="line">log4j.rootLogger=DEBUG,A1</span><br><span class="line">#### 日志文件按天产生</span><br><span class="line">log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">#### 指定日志消息的输出最低层次</span><br><span class="line">log4j.appender.A1.Threshold=DEBUG</span><br><span class="line">#### 日志文件位置</span><br><span class="line">log4j.appender.A1.File=E:\\debug.log</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.Encoding=utf-8</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=[demo] %d %-5p %c %x - %m%n</span><br></pre></td></tr></table></figure></p>
<h4 id="2-按包或类单独打日志文件">2.按包或类单独打日志文件</h4><pre><code>定义单独包或类的日志输出源
设置子日志是否继承父日志,设置log4j.additivity的值设置规则如下：
log4j<span class="class">.additivity</span><span class="class">.cn</span><span class="class">.com</span><span class="class">.a1</span><span class="class">.TestB</span> = false
log4j.additivity后面跟上据体要设置的包或类，类得带完整的包路径
</code></pre><h4 id="以下是一个配置的demo">以下是一个配置的demo</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 日志级别 </span><br><span class="line">log4j.rootLogger=DEBUG,A1</span><br><span class="line">#### 日志文件按天产生</span><br><span class="line">log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">#### 指定日志消息的输出最低层次</span><br><span class="line">log4j.appender.A1.Threshold=DEBUG</span><br><span class="line">#### 日志文件位置</span><br><span class="line">log4j.appender.A1.File=E:\\debug.log</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.Encoding=utf-8</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=[demo] %d %-5p %c %x - %m%n</span><br><span class="line"></span><br><span class="line">####false 子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。####</span><br><span class="line">#### 类cn.com.a1.TestB的日志只会打在自己的appender里而不会打到父appender里</span><br><span class="line">log4j.additivity.cn.com.a1.TestB = false </span><br><span class="line"></span><br><span class="line">log4j.appender.testb=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.testb.Threshold=DEBUG</span><br><span class="line">#### 类TestB的日志文件位置</span><br><span class="line">log4j.appender.testb.File=E:\\testb.log</span><br><span class="line">log4j.appender.testb.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.testb.Encoding=utf-8</span><br><span class="line">log4j.appender.testb.layout.ConversionPattern=[QiConsoleDaemon] %d %-5p %c %x - %m%n</span><br><span class="line">####单独定义某个包或类的日志输出级别和输出源，输出源可有多个，以逗号分隔，具体格式如下</span><br><span class="line">####日志级别，文件输出源</span><br><span class="line">log4j.logger.cn.com.a1.TestB=DEBUG,testb</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;log4j作为日志工具，想必大家已经非常熟悉，我们在日常的项目开发中经常会用到，它的功能很强大，我就不一一熬述了，把我觉得比较常用的功能总结一下。&lt;/p&gt;
&lt;h4 id=&quot;1-根日志属性项&quot;&gt;1.根日志属性项&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;titl
    
    </summary>
    
    
      <category term="日志工具" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>storm-kafka使用</title>
    <link href="http://yoursite.com/2015/11/19/storm-kafka-demo/"/>
    <id>http://yoursite.com/2015/11/19/storm-kafka-demo/</id>
    <published>2015-11-19T13:22:31.000Z</published>
    <updated>2016-01-06T13:34:15.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-storm-kafka介绍">1.storm-kafka介绍</h3><p>storm-kafka是storm自带的从kafka上获取消息的kafka客户端程序。<br>提供kafka和Trident的spout实现从kafka消费数据。</p>
<h3 id="2-storm-kafka的使用实例">2.storm-kafka的使用实例</h3><p>maven的依赖配置文件,要注意strom-kafka是使用的kafka的低级api，因此也要引用kafka的包。如果不引，虽然编译不报错，但运行时会报错，我在初次使用时就是因为这个原因一直有问题。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.storm<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>storm-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>0.9.5<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.storm<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>storm-kafka<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>0.9.5<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>kafka_2.10<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>0.8.1.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">exclusion</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>下面是我写的一个demo<br>具体步骤如下<br>1.new BrokerHosts<br>  需要的参数zookeeper的地址<br>2.new SpoutConfig<br> 构建SpoutConfig，需要设置BrokerHosts，kafka的topic，strom在zookeeper上的根等相关的参数。<br>3.new TopologyBuilder<br> 给TopologyBuilder设置Soupt和Boult用于构建一个Topology<br>4.配置Config并设置参数，启动LocalCluster，提交topology任务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> storm.kafka.BrokerHosts;</span><br><span class="line"><span class="keyword">import</span> storm.kafka.KafkaSpout;</span><br><span class="line"><span class="keyword">import</span> storm.kafka.SpoutConfig;</span><br><span class="line"><span class="keyword">import</span> storm.kafka.StringScheme;</span><br><span class="line"><span class="keyword">import</span> storm.kafka.ZkHosts;</span><br><span class="line"><span class="keyword">import</span> backtype.storm.Config;</span><br><span class="line"><span class="keyword">import</span> backtype.storm.LocalCluster;</span><br><span class="line"><span class="keyword">import</span> backtype.storm.spout.SchemeAsMultiScheme;</span><br><span class="line"><span class="keyword">import</span> backtype.storm.task.OutputCollector;</span><br><span class="line"><span class="keyword">import</span> backtype.storm.task.TopologyContext;</span><br><span class="line"><span class="keyword">import</span> backtype.storm.topology.OutputFieldsDeclarer;</span><br><span class="line"><span class="keyword">import</span> backtype.storm.topology.TopologyBuilder;</span><br><span class="line"><span class="keyword">import</span> backtype.storm.topology.base.BaseRichBolt;</span><br><span class="line"><span class="keyword">import</span> backtype.storm.tuple.Tuple;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@Description</span>:strom-kafka 使用</span><br><span class="line"> * <span class="doctag">@author</span>:duyongfeng</span><br><span class="line"> * <span class="doctag">@time</span>:2015年11月18日 上午10:18:31</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StormKafkaConsumer</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PingCounter</span> <span class="keyword">extends</span> <span class="title">BaseRichBolt</span></span>&#123;</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * </span><br><span class="line">		 */</span></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">		<span class="keyword">private</span> OutputCollector collector;</span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple input)</span> </span>&#123;</span><br><span class="line">			String msg = input.getString(<span class="number">0</span>);</span><br><span class="line">			System.out.println(<span class="string">"---------------------"</span> + msg + <span class="string">"-----------------"</span>);</span><br><span class="line">			collector.ack(input);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map arg0, TopologyContext arg1, OutputCollector arg2)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.collector = arg2;</span><br><span class="line">            System.out.println(<span class="string">"++++++++++++++++++++prepare++++++++++++++++++++++++++++++++++"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer arg0)</span> </span>&#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			 System.out.println(<span class="string">"++++++++++++++++++++declareOutputFields+++++++++++++++++++++"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">//zookeeper的服务器地址</span></span><br><span class="line">		String zks = <span class="string">"192.168.1.50:2181,192.168.1.57:2181,192.168.1.58:2181"</span>;</span><br><span class="line">	    <span class="comment">//消息的topic</span></span><br><span class="line">		String topic = <span class="string">"data_icmp_ping"</span>;</span><br><span class="line">		<span class="comment">//strom在zookeeper上的根</span></span><br><span class="line">		String zkRoot = <span class="string">"/storm"</span>; </span><br><span class="line">		String id = <span class="string">"data_icmp_ping"</span>;</span><br><span class="line">		BrokerHosts brokerHosts = <span class="keyword">new</span> ZkHosts(zks);</span><br><span class="line">		SpoutConfig spoutConf = <span class="keyword">new</span> SpoutConfig(brokerHosts, topic, zkRoot, id);</span><br><span class="line">		spoutConf.scheme = <span class="keyword">new</span> SchemeAsMultiScheme(<span class="keyword">new</span> StringScheme());</span><br><span class="line">		spoutConf.forceFromStart = <span class="keyword">true</span>;</span><br><span class="line">		spoutConf.zkServers = Arrays.asList(<span class="keyword">new</span> String[] &#123;<span class="string">"192.168.1.50,192.168.1.57,192.168.1.58"</span>&#125;);</span><br><span class="line">		spoutConf.zkPort = <span class="number">2181</span>;</span><br><span class="line">		</span><br><span class="line">		TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</span><br><span class="line">		builder.setSpout(<span class="string">"kafka-reader"</span>, <span class="keyword">new</span> KafkaSpout(spoutConf),<span class="number">3</span>); </span><br><span class="line">		builder.setBolt(<span class="string">"ping-counter"</span>, <span class="keyword">new</span> PingCounter(),<span class="number">3</span>).shuffleGrouping(<span class="string">"kafka-reader"</span>);</span><br><span class="line">		Config conf = <span class="keyword">new</span> Config();</span><br><span class="line">        conf.setDebug(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置任务线程数</span></span><br><span class="line">        conf.setMaxTaskParallelism(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</span><br><span class="line">		cluster.submitTopology(<span class="string">"test"</span>, conf, builder.createTopology());</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">60000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		cluster.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-storm-kafka介绍&quot;&gt;1.storm-kafka介绍&lt;/h3&gt;&lt;p&gt;storm-kafka是storm自带的从kafka上获取消息的kafka客户端程序。&lt;br&gt;提供kafka和Trident的spout实现从kafka消费数据。&lt;/p&gt;
&lt;h3 id
    
    </summary>
    
    
      <category term="storm" scheme="http://yoursite.com/tags/storm/"/>
    
  </entry>
  
  <entry>
    <title>observer(观察者模式)-对象行为模式</title>
    <link href="http://yoursite.com/2015/10/05/design-pattern-observer/"/>
    <id>http://yoursite.com/2015/10/05/design-pattern-observer/</id>
    <published>2015-10-05T08:25:44.000Z</published>
    <updated>2015-10-05T08:27:36.442Z</updated>
    
    <content type="html"><![CDATA[<h4 id="意图：">意图：</h4><p>定义对象之间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到该状态通知并自动更新。</p>
<h5 id="适用性：">适用性：</h5><blockquote>
<ul>
<li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将两者封装为独立的对象以使他们可以各自独立地改变和复用。</li>
<li>当一个对象的改变学要同时影响到其他对象，而不知道有具体多少个对象有待改变。</li>
<li>当一个对象必须通知其他对象，而他又不能假定其他对象是谁，换言之，你不希望这些对象是耦合的。</li>
</ul>
</blockquote>
<h5 id="结构图：">结构图：</h5><p><img src="http://7xawio.com1.z0.glb.clouddn.com/design_pattern_observer.png" alt="img"></p>
<h4 id="抽象的主题">抽象的主题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	List&lt;Observer&gt; observerList = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * </span><br><span class="line">	 * add the observer</span><br><span class="line">	 * <span class="doctag">@param</span> observer</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">		observerList.add(observer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * </span><br><span class="line">	 *delete the observer</span><br><span class="line">	 * <span class="doctag">@param</span> observer</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Detach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(Observer curObserver:observerList)&#123;</span><br><span class="line">			<span class="keyword">if</span>(curObserver == observer)&#123;</span><br><span class="line">				observerList.remove(observerList.indexOf(observer));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * </span><br><span class="line">	 * notify observer</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Observer curObserver:observerList)&#123;</span><br><span class="line">			curObserver.update();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="具体的主题">具体的主题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String subjectState;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> subjectState;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String subjectState)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.subjectState = subjectState;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="抽象的观察者：">抽象的观察者：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">	   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="具体的观察者：">具体的观察者：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String observerName;</span><br><span class="line">    <span class="keyword">private</span> String observerState;</span><br><span class="line">	<span class="keyword">private</span> ConcreteSubject subject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObserverName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> observerName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObserverName</span><span class="params">(String observerName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.observerName = observerName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getObserverState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> observerState;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObserverState</span><span class="params">(String observerState)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.observerState = observerState;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteObserver</span><span class="params">(ConcreteSubject subject,String observerName)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.subject = subject;</span><br><span class="line">    	<span class="keyword">this</span>.observerName = observerName;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		observerState = subject.getState();</span><br><span class="line">	    System.out.println(<span class="string">"I'am "</span> + observerName + <span class="string">",I see  concreteSubject has a state change:"</span> + observerState);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="客户端调用：">客户端调用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">    	   ConcreteSubject concreteSubject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">    	   Observer  observer1 = <span class="keyword">new</span> ConcreteObserver(concreteSubject,<span class="string">"observer1"</span>);</span><br><span class="line">    	   Observer  observer2 = <span class="keyword">new</span> ConcreteObserver(concreteSubject,<span class="string">"observer2"</span>);</span><br><span class="line">    	   Observer  observer3 = <span class="keyword">new</span> ConcreteObserver(concreteSubject,<span class="string">"observer3"</span>);</span><br><span class="line">    	   concreteSubject.Attach(observer1);</span><br><span class="line">    	   concreteSubject.Attach(observer2);</span><br><span class="line">    	   concreteSubject.Attach(observer3);</span><br><span class="line">    	   concreteSubject.setState(<span class="string">"I am running"</span>);</span><br><span class="line">    	   concreteSubject.notifyObserver();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;意图：&quot;&gt;意图：&lt;/h4&gt;&lt;p&gt;定义对象之间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到该状态通知并自动更新。&lt;/p&gt;
&lt;h5 id=&quot;适用性：&quot;&gt;适用性：&lt;/h5&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一个抽象模型有两个方面
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>memento（备忘录）-对象行为模式</title>
    <link href="http://yoursite.com/2015/09/29/design-pattern-memento/"/>
    <id>http://yoursite.com/2015/09/29/design-pattern-memento/</id>
    <published>2015-09-29T15:05:55.000Z</published>
    <updated>2015-10-05T08:31:12.962Z</updated>
    
    <content type="html"><![CDATA[<h4 id="意图：">意图：</h4><p>在不破坏分装性的前提下，捕获一个对象的内部状态，并在改对象的外部保存。</p>
<h4 id="适用性：">适用性：</h4><blockquote>
<ul>
<li>必须保存一个对象在某一个时刻的（部分）状态，这样以后需要时它才能恢复到先前之前的状态。</li>
<li>如果一个用接口来让其他对象直接得到这些状态，将会暴漏对象的实现细节并破坏对象的封装性。</li>
</ul>
</blockquote>
<p>结构：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/design_pattern_memento.png" alt="img"></p>
<h4 id="原发者:">原发者:</h4><p>原发者，也就是需要备忘录的一类对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line">   <span class="comment">//原发者的状态</span></span><br><span class="line">	Object state;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.state = memento.getState();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//创建备忘录</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Memento  <span class="title">createMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="备忘录：">备忘录：</h4><p>用来记录原发者的内部状态<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Memento</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> Object state;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(Object state)</span></span>&#123;</span><br><span class="line">    	  <span class="keyword">this</span>.state = state;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	  <span class="keyword">return</span> <span class="keyword">this</span>.state;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(Object state)</span></span>&#123;</span><br><span class="line">    	  <span class="keyword">this</span>.state = state;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="守护者：">守护者：</h4><p>使用备忘录记录原发者的信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line">	Memento memento = <span class="keyword">new</span> Memento(); </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">     	<span class="keyword">this</span>.memento = memento;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> stack.pop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="客户端">客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	    <span class="comment">//创建状态守护者</span></span><br><span class="line">        Caretaker taker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        <span class="comment">//创建原发者</span></span><br><span class="line">        Originator orig = <span class="keyword">new</span> Originator();</span><br><span class="line">        <span class="comment">//原发者设置状态</span></span><br><span class="line">        orig.state = <span class="string">"open"</span>;</span><br><span class="line">        System.out.println(<span class="string">"origin's state  is "</span> + orig.state);</span><br><span class="line">        <span class="comment">//守护者保存原发者的状态</span></span><br><span class="line">        taker.save(orig.createMemento());</span><br><span class="line">        <span class="comment">//守护者恢复原发者的状态</span></span><br><span class="line">        orig.setMemento(taker.resume());</span><br><span class="line">        System.out.println(<span class="string">"after resume,originator's state  is "</span> + orig.state);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;意图：&quot;&gt;意图：&lt;/h4&gt;&lt;p&gt;在不破坏分装性的前提下，捕获一个对象的内部状态，并在改对象的外部保存。&lt;/p&gt;
&lt;h4 id=&quot;适用性：&quot;&gt;适用性：&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;必须保存一个对象在某一个时刻的（部分）状态，这样以后需要时它才
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Builder(生成器)-对象创建型模式</title>
    <link href="http://yoursite.com/2015/09/05/design-pattern-builder/"/>
    <id>http://yoursite.com/2015/09/05/design-pattern-builder/</id>
    <published>2015-09-05T09:39:50.000Z</published>
    <updated>2015-10-05T08:30:03.888Z</updated>
    
    <content type="html"><![CDATA[<h4 id="意图：">意图：</h4><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p>
<h4 id="适用性：">适用性：</h4><blockquote>
<ul>
<li>在以下情况使用Builder模式</li>
<li>当创建负载对象的算法应该独立于该对象的组成部分以及他们的装配方式</li>
<li>当构造的过程必须允许被构造的对象有不同的表示时</li>
</ul>
</blockquote>
<h4 id="结构：">结构：</h4><p><img src="http://7xawio.com1.z0.glb.clouddn.com/design_pattern_builder_demo1.png" alt="img"></p>
<h4 id="实现：">实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPart1</span><span class="params">()</span></span>;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPart2</span><span class="params">()</span></span>;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product  <span class="title">getResult</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> product;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		product.setPart1(<span class="string">"part1"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		product.setPart2(<span class="string">"part2"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Object part1;</span><br><span class="line">	<span class="keyword">private</span> Object part2;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getPart1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> part1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart1</span><span class="params">(Object part1)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.part1 = part1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getPart2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> part2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart2</span><span class="params">(Object part2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.part2 = part2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span>  Builder builder;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">    	   <span class="keyword">this</span>.builder = builder;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> Product <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	   String [] parts = &#123;<span class="string">"part1"</span>,<span class="string">"part2"</span>&#125;;</span><br><span class="line">    	   <span class="keyword">for</span>(String part:parts)&#123;</span><br><span class="line">    		  <span class="keyword">if</span>(<span class="string">"part1"</span>.equals(part))&#123;</span><br><span class="line">    			  builder.buildPart1();</span><br><span class="line">    		  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    			  builder.buildPart2();</span><br><span class="line">    		  &#125;</span><br><span class="line">    	   &#125;</span><br><span class="line">    	   <span class="keyword">return</span> builder.getResult();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        ConcreteBuilder concreteBuilder = <span class="keyword">new</span> ConcreteBuilder();</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(concreteBuilder);</span><br><span class="line">        Product product = director.construct();</span><br><span class="line">        System.out.println(product.getPart1() + <span class="string">","</span> + product.getPart2());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;意图：&quot;&gt;意图：&lt;/h4&gt;&lt;p&gt;将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示&lt;/p&gt;
&lt;h4 id=&quot;适用性：&quot;&gt;适用性：&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在以下情况使用Builder模式&lt;/li&gt;
&lt;li&gt;当创建负
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Chain of Responsibility(责任连模式)-行为模式</title>
    <link href="http://yoursite.com/2015/09/04/pattern-chainOfResponsibility/"/>
    <id>http://yoursite.com/2015/09/04/pattern-chainOfResponsibility/</id>
    <published>2015-09-04T09:14:22.000Z</published>
    <updated>2015-10-05T08:31:59.528Z</updated>
    
    <content type="html"><![CDATA[<p>意图：<br>使多个对象都有机会处理请求，避免请求发送者和请求接受这之间的耦合。把接收对象连成一条链，请求沿着链条传递，直到一个对象处理它。<br>适用场景：</p>
<blockquote>
<ul>
<li>不止一个对象处理请求,处理也没有优先级，在运行时刻自动处理</li>
<li>想在不明确接收者的情况下，向多个对象中的一个提交请求</li>
<li>可处理一个请求的对象集合，可以被动态指定</li>
</ul>
</blockquote>
<h4 id="结构图">结构图</h4><p><img src="http://7xawio.com1.z0.glb.clouddn.com/design_pattern_chainOfResponsibility.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> Handler handlerSuccessor;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Handler <span class="title">getHandlerSuccessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> handlerSuccessor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHandlerSuccessor</span><span class="params">(Handler handlerSuccessor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.handlerSuccessor = handlerSuccessor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(getHandlerSuccessor() != <span class="keyword">null</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"ConcreteHandler1处理请求完毕，转发到下一个责任对象处理"</span>);</span><br><span class="line">			getHandlerSuccessor().HandleRequest();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"ConcreteHandler1处理请求"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(getHandlerSuccessor() != <span class="keyword">null</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"ConcreteHandler2处理请求完毕，转发到下一个责任对象处理"</span>);</span><br><span class="line">			getHandlerSuccessor().HandleRequest();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"ConcreteHandler2处理请求"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">    	   Handler handler1 = <span class="keyword">new</span> ConcreteHandler1();</span><br><span class="line">    	   Handler handler2 = <span class="keyword">new</span> ConcreteHandler2();</span><br><span class="line">    	   <span class="comment">//设置handler1的下个责任对象为handler2</span></span><br><span class="line">    	   handler1.setHandlerSuccessor(handler2);</span><br><span class="line">    	   <span class="comment">//提交请求</span></span><br><span class="line">    	   handler1.HandleRequest();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>demo1：<br>uml图:<br><img src="http://7xawio.com1.z0.glb.clouddn.com/design_pattern_chainOfResponsibilitydemo1.png" alt="img"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">*定义过滤器的接口</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Object request)</span></span>;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 具体过滤器1</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFilter1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Object request)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"请求经过ConcreteFilter1"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 具体过滤器2</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFilter2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Object request)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"请求经过ConcreteFilter1"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 具体过滤器链</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChain</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Filter&gt; filterChain = <span class="keyword">new</span> ArrayList&lt;Filter&gt;();</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * </span><br><span class="line">     */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Object request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Filter filter:filterChain)&#123;</span><br><span class="line">			filter.doFilter(request);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * add filter</span><br><span class="line">	 * <span class="doctag">@param</span> filter</span><br><span class="line">	 * <span class="doctag">@return</span> current FilterChain instance </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> FilterChain <span class="title">addFilter</span><span class="params">(Filter filter)</span></span>&#123;</span><br><span class="line">		filterChain.add(filter);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;意图：&lt;br&gt;使多个对象都有机会处理请求，避免请求发送者和请求接受这之间的耦合。把接收对象连成一条链，请求沿着链条传递，直到一个对象处理它。&lt;br&gt;适用场景：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不止一个对象处理请求,处理也没有优先级，在运行时刻自动处理&lt;/
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>proxy(代理模式)</title>
    <link href="http://yoursite.com/2015/09/01/pattern-proxy/"/>
    <id>http://yoursite.com/2015/09/01/pattern-proxy/</id>
    <published>2015-09-01T15:33:06.000Z</published>
    <updated>2015-10-05T08:32:25.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="意图：">意图：</h3><p>提供一个供其他对象使用的代理对象</p>
<h3 id="适用场景：">适用场景：</h3><p>1.远程代理<br>2.虚拟代理<br>3.保护代理<br>4.智能指针</p>
<p>结构图：<br><img src="http://7xawio.com1.z0.glb.clouddn.com/design_pattern_proxy.png" alt="img"><br>实现:<br>Proxy和Realsubject定义的公共接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span><br><span class="line"> * 为 Proxy和Realsubject定义的公共接口</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>实际服类RealSubject<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span><br><span class="line"> * 实际服务的类</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"I am RealSubject,request is ok"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代理类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span><br><span class="line"> * 代理类</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  RealSubject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"I am Proxy,resquest is Ok!"</span>);</span><br><span class="line">		realSubject.request();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>客户端调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">		Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">		proxy.request();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;意图：&quot;&gt;意图：&lt;/h3&gt;&lt;p&gt;提供一个供其他对象使用的代理对象&lt;/p&gt;
&lt;h3 id=&quot;适用场景：&quot;&gt;适用场景：&lt;/h3&gt;&lt;p&gt;1.远程代理&lt;br&gt;2.虚拟代理&lt;br&gt;3.保护代理&lt;br&gt;4.智能指针&lt;/p&gt;
&lt;p&gt;结构图：&lt;br&gt;&lt;img src=&quot;http:
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
